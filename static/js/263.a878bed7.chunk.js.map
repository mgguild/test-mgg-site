{"version":3,"file":"static/js/263.a878bed7.chunk.js","mappings":"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","sources":["Pages/Staking/styled.tsx","hooks/useRoninData.ts","Pages/Staking/staking.tsx","contexts/RefreshContext.tsx","hooks/useRefresh.ts","hooks/useWeb3.ts","utils/web3.ts"],"sourcesContent":["import styled from 'styled-components'\nimport { Flex, Heading, Button } from '@metagg/mgg-uikit'\nimport BGimage from '../../assets/background/BGStaking1.png'\n\nexport const Card = styled.div`\n  background-color: #0c012c;\n  border: #008ffd 0.15rem solid;\n  border-radius: 0.5rem;\n  padding: 3rem;\n  z-index: 3;\n  margin: 1rem;\n  text-align: center;\n`\n\nexport const Btn = styled(Button)`\n  border-radius: 2rem;\n  width: 250px;\n  background-color: rgb(0, 196, 204);\n  color: black;\n  \n`\n\nexport const InformativeButton = styled(Button)`\n  width: 150px;\n  height: 45px;\n  margin: 0.5rem 0;\n  position: relative;\n  padding: 1px;\n\n  background-image: linear-gradient(blue, skyblue);\n  border: none;\n  border-radius: 4px;\n  transition: box-shadow 0.3s ease-in-out, background-image 0.3s ease-in-out; /* Smooth transition for color */\n  &:hover {\n    background-image: linear-gradient( skyblue, blue); /* New gradient on hover */\n  }\n`;\n\n\n\n\nexport const CardContainer = styled.div`\n  flex: 1;\n  max-width: 26rem;\n  min-width: 16rem;\n  position: relative;\n`\n\nexport const RdmapList = styled.ul`\n  text-align: left;\n  color: white;\n  list-style-type: none;\n  line-height: 1.5;\n  font-weight: 400;\n`\n\nexport const CheckList = styled.li`\n  padding: 1rem 0 0 1rem;\n  &:before{\n    content: \"✔\";\n    color: #06ff65;\n    font-weight: bold;\n    display: inline-block;\n    width: 1rem;\n    margin-left: -1rem;\n  }\n`\n\nexport const List = styled.li`\n  padding: 1rem 0 0 1rem;\n  &:before{\n    content: \"●\";\n    color: #fdda00;\n    font-weight: bold;\n    display: inline-block;\n    width: 1rem;\n    margin-left: -1rem;\n  }\n`\n\nexport const BgPage = styled.div<{padding?: string}>`\n  padding: ${({padding}) => padding ? padding: '5rem 0'};\n  text-align: center;\n  overflow: hidden;\n  width: 100%;\n  height: 100%;\n  position: relative;\n  & .pad-5rem {\n    padding: 3rem;\n    @media screen and (max-width: 500px) {\n      padding: 2rem 0;\n    }\n  }\n  & .pad-10rem {\n    padding: 10rem;\n    @media screen and (max-width: 500px) {\n      padding: 5rem 0;\n    }\n  }\n  &:before {\n    content: '';\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    z-index: 0;\n    background-image: url(${BGimage});\n    background-repeat: no-repeat;\n    background-position: center;\n    background-size: cover;\n  }\n\n  @media screen and (max-width: 500px) {\n    padding: 0.5rem;\n  }\n`\n\n\nexport const HeadingGlow = styled(Heading)<{ glow?: string }>`\n  text-shadow: 0 0 0.5rem ${({ glow }) => (glow ??'#00f4fd')};\n`\n","import { useEffect, useState } from \"react\";\nimport useRefresh from \"./useRefresh\";\nimport { Validator } from \"config/constants/types\";\n\nconst url = \"https://ronin-node-server.vercel.app\";\n\ninterface RoninData {\n    validator: Validator;\n    market: any;\n    price?: string;\n    totalStaked?: string;\n    apr?: string;\n}\n\nconst useFetchRoninData = () => {\n    const { fastRefresh } = useRefresh();\n    const [roninData, setRoninData] = useState<RoninData>();\n\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                console.log(\"Fetching validator data...\");\n                let response = await fetch(`${url}/getValidator`, {\n                    headers: { \"content-type\": \"application/json\" }\n                });\n\n                if (!response.ok) {\n                    throw new Error(\"Failed to fetch validator data\");\n                }\n\n                const validatorData = await response.json();\n                console.log(\"Validator data:\", validatorData);\n\n                console.log(\"Fetching market data...\");\n                response = await fetch(`${url}/getRoninMarket`, {\n                    headers: { \"content-type\": \"application/json\" }\n                });\n\n                if (!response.ok) {\n                    throw new Error(\"Failed to fetch market data\");\n                }\n\n                const marketData = await response.json();\n                console.log(\"Market data structure:\", marketData);\n\n                const rawTotalStaked = validatorData.Validator?.totalStaked ? validatorData.Validator.totalStaked.toString() : \"\";\n                console.log(\"Raw Total Staked (before truncation):\", rawTotalStaked);\n\n                const truncatedTotalStaked = rawTotalStaked.length > 18 ? rawTotalStaked.slice(0, -18) : rawTotalStaked;\n                console.log(\"Truncated Total Staked (after removing 18 digits):\", truncatedTotalStaked);\n\n                const formattedTotalStaked = truncatedTotalStaked\n                    ? parseFloat(truncatedTotalStaked).toLocaleString(\"en-US\", { maximumFractionDigits: 0 })\n                    : \"TBA\";\n\n                const formattedApr = validatorData.Validator?.apr\n                    ? parseFloat(validatorData.Validator.apr).toFixed(2)\n                    : \"TBA\";\n\n                const formattedPrice =\n                    marketData.data?.price && !isNaN(Number(marketData.data.price))\n                        ? Number(marketData.data.price).toFixed(2)\n                        : \"TBA\";\n\n                console.log(\"Formatted price:\", formattedPrice);\n\n                setRoninData({\n                    validator: validatorData.Validator,\n                    market: marketData.data,\n                    price: formattedPrice,\n                    totalStaked: formattedTotalStaked,\n                    apr: formattedApr,\n                });\n            } catch (error) {\n                console.error(\"Error fetching Ronin data:\", error);\n            }\n        };\n\n        fetchData();\n    }, [fastRefresh]);\n\n    return roninData;\n};\n\nexport default useFetchRoninData;\n","import React, { useCallback, useContext, useEffect, useState } from 'react';\nimport { Flex, Heading, Text } from '@metagg/mgg-uikit';\nimport styled, { ThemeContext } from 'styled-components';\nimport { BgPage, Btn, Card, HeadingGlow, InformativeButton } from './styled';\nimport useWeb3 from \"../../hooks/useWeb3\";\nimport { getBalanceAmount, getBalanceNumber, toBigNumber } from \"../../utils/formatBalance\";\nimport useFetchRoninData from 'hooks/useRoninData';\nimport LogoRonin from '../../assets/images/Logo_Ronin.png';\nimport CarvIcon from '../../assets/images/Logo_Carv.png';\nimport DymIcon from '../../assets/images/Logo_Dymension.png';\nimport StakingImg from '../../assets/images/Staking.png';\nimport RioImg from '../../assets/images/rio_icon.png';\nimport Page from 'components/layout/Page';\n\nconst TableDesc = styled.div`\n  text-align: center;\n  font-size: 1.2rem;\n\n  @media screen and (max-width: 600px) {\n    font-size: 1rem;\n  }\n`;\n\nconst TableDesc2 = styled.div`\n  text-align: center;\n  font-size: 1.2rem;\n  color: white;\n\n  @media screen and (max-width: 600px) {\n    font-size: 0.8rem;\n  }\n`;\n\nconst DescText = styled.div`\n  margin-top: 0.5rem;\n  font-size: 1.2rem;\n  color: white;\n\n  @media screen and (max-width: 500px) {\n    font-size: 1rem;\n  }\n`;\n\nconst InfoSection = styled(Flex)`\n  margin-top: 1.5rem;\n  font-size: 1rem;\n  color: white;\n  text-align: justify;\n\n  @media screen and (max-width: 768px) {\n    margin-top: 1rem;\n    font-size: 0.9rem;\n    text-align: left; /* Align text left for mobile */\n  }\n`;\n\nconst TableRow = styled(Flex)`\n  padding: 1rem;\n  border: 1px solid #1E90FF;\n  border-radius: 8px;\n  background-color: #0c0f2c;\n  justify-content: space-between;\n  align-items: center;\n  width: 100%;\n  max-width: 1200px;\n  margin-bottom: 1rem;\n  transition: background-color 0.3s ease, border-color 0.3s ease, box-shadow 0.3s ease; /* Smooth transition */\n  &:hover {\n    border-color: #DAF7A6; \n    box-shadow: 0 0 8px 2px #DAF7A6; /* Optional shadow effect for highlight */\n  }\n    \n  @media screen and (max-width: 600px) {\n    flex-direction: column;\n    align-items: center;\n    padding: 0.75rem; /* Adjust padding for smaller screens */\n  }\n`;\n\nconst TableRowContent = styled(Flex)`\n  align-items: center;\n  gap: 1rem;\n\n  @media screen and (max-width: 600px) {\n    flex-direction: column;\n    gap: 1.5rem; /* Reduce gap for mobile */\n  }\n`;\n\nconst StakingCard = styled(Card)`\n  padding: 2rem;\n  text-align: center;\n  border: 1px solid #1E90FF;\n  background-color: #0c0f2c;\n  width: 100%;\n  max-width: 365px;\n  margin: 1rem;\n  transition: background-color 0.3s ease, border-color 0.3s ease, box-shadow 0.3s ease; /* Smooth transition */\n  \n  &:hover {\n    border-color: #DAF7A6; /* Change to highlight color on hover */\n    box-shadow: 0 0 8px 2px #DAF7A6; /* Optional shadow effect for highlight */\n  }\n\n  @media screen and (max-width: 600px) {\n    padding: 1.5rem; /* Adjust padding */\n    margin: 0.5rem; /* Adjust margin */\n    width: 100%; /* Ensure it takes full width */\n  }\n`;\n\nconst AnimatedText = styled(DescText)`\n  display: inline-block;\n  animation: slide 15s linear infinite; // Customize timing as needed\n\n  @keyframes slide {\n    from {\n      transform: translateX(120%); // Start from right side outside the view\n    }\n    to {\n      transform: translateX(-120%); // End on the left side outside the view\n    }\n  }\n`;\n\nconst DescTextContainer = styled.div`\n  padding-left: 12rem;\n  padding-right: 0rem;\n  overflow: hidden; \n  white-space: nowrap; \n  width: 115%;\n`;\n\n\nasync function fetchPriceData() {\n  return {\n    ronPrice: 1.52,\n    ronTotalStake: '2,067,847 RON',\n    ronApr: '11.09/10.14%',\n  };\n}\n\nconst Staking: React.FC = () => {\n  const theme = useContext(ThemeContext);\n  const web3 = useWeb3();\n  const [requestedMint, setRequestMint] = useState(false);\n  const [price, setPrice] = useState(\"TBA\");\n  const [totalStaked, setTotalStaked] = useState(\"TBA\");\n  const [apr, setApr] = useState(\"TBA\");\n  const roninData = useFetchRoninData();\n\n  useEffect(() => {\n    if (roninData) {\n      console.log('Fetched roninData:', roninData);\n      setPrice(roninData.market[\"14101\"].quote.USD.price ?? \"TBA\");  \n      setTotalStaked(roninData.totalStaked ?? \"TBA\");  \n      setApr(roninData.apr ?? \"TBA\");  \n    }\n  }, [roninData]);\n\n  return (\n    <Page>\n    <BgPage padding=\"0\">\n      <div style={{ position: 'relative', zIndex: 2 }}>\n        <div style={{ margin: '0rem 0', padding: window.innerWidth <= 768 ? '0rem' : '8rem', paddingTop: window.innerWidth <= 768 ? '5rem' : '8rem', }}>\n          <div style={{ display: 'inline-flex', gap: window.innerWidth <= 768 ? '3rem' : '17rem', justifyContent: 'space-around', flexWrap: 'wrap' }}>\n            <div style={{ textAlign: 'left', alignContent: 'center' }}>\n              <HeadingGlow size=\"xxl\" color=\"#fdda00\" glow=\"#fdda00\" marginBottom= '1rem'>\n                Earn Staking Rewards\n              </HeadingGlow>\n              <br />\n              <DescText>Stake your RON, CARV, and earn rewards.</DescText>\n            </div>\n            <div style={{ margin: '10px' }}>\n              <img src={StakingImg} alt=\"Guild Rewards\" width={300} />\n            </div>\n          </div>\n          <div style={{ display: 'inline-grid',  justifyContent: 'space-around', flexWrap: 'wrap', paddingRight: window.innerWidth <= 768 ? '0rem' : '10rem', paddingTop: window.innerWidth <= 768 ? '4rem' : '3rem', paddingBottom: window.innerWidth <= 768 ? '2rem' : '3rem'}}>\n            <DescTextContainer>\n              <AnimatedText style={{ color: 'yellow' }}>\n                Stake your RONIN Tokens today and join the MGG Airdrop with a reward pool valued at $50,000.\n              </AnimatedText>\n            </DescTextContainer>\n            </div>\n\n            {/* RON */}\n          <Flex flexDirection=\"column\" alignItems=\"center\" style={{ margin: '5rem 0 3rem 0rem' }}>\n            <TableRow>\n              <TableRowContent>\n                <img src={LogoRonin} alt=\"RON\" style={{ width: '50px', height: '50px' }} />\n                <Heading size=\"xl\" color=\"white\">RON</Heading>\n              </TableRowContent>\n              <Flex\n                    style={{\n                      gap: window.innerWidth <= 768 ? '2.5rem' : '12.5rem', \n                      color: '#FFD700',\n                      paddingRight: window.innerWidth <= 768 ? '0rem' : '8rem', \n                      paddingTop: window.innerWidth <= 768 ? '3rem' : '0rem', \n                      alignItems: 'center',\n                    }}\n                  >\n                 <div style={{ display: 'flex', flexDirection: 'column', color: '#FFD700' }}>\n                  <TableDesc color=\"#fdda00\">Price:</TableDesc>\n                  <TableDesc2>$1.46</TableDesc2> \n                </div>\n                <div style={{ display: 'flex', flexDirection: 'column', color: '#FFD700' }}> \n                  <TableDesc color=\"#fdda00\">Total Stake:</TableDesc>\n                  <TableDesc2>{totalStaked} RON</TableDesc2>\n                </div>\n                <div style={{ display: 'flex', flexDirection: 'column', color: '#FFD700' }}> \n                  <TableDesc color=\"#fdda00\">APR:</TableDesc>\n                  <TableDesc2>11.11/{apr}%</TableDesc2> \n                </div>      \n              </Flex>\n            </TableRow>\n          </Flex>\n\n          {/* RIO */}\n          <Flex flexDirection=\"column\" alignItems=\"center\" style={{ margin: '5rem 0 3rem 0rem' }}>\n            <TableRow>\n              <TableRowContent>\n                <img src={RioImg} alt=\"RON\" style={{ width: '50px', height: '50px' }} />\n                <Heading size=\"xl\" color=\"white\">RIO</Heading>\n              </TableRowContent>\n              <Flex\n                    style={{\n                      gap: window.innerWidth <= 768 ? '3rem' : '14.2rem', // Adjust gap for mobile view\n                      color: '#FFD700',\n                      paddingRight: window.innerWidth <= 768 ? '0rem' : '10rem', // Adjust paddingRight for mobile view\n                      paddingTop: window.innerWidth <= 768 ? '3rem' : '0rem', \n                      alignItems: 'center',\n                    }}\n                  >\n                 <div style={{ display: 'flex', flexDirection: 'column', color: '#FFD700' }}>\n                  <TableDesc color=\"#fdda00\">Price:</TableDesc>\n                  <TableDesc2>$0.72</TableDesc2> {/* Use the price from state */}\n                </div>\n                <div style={{ display: 'flex', flexDirection: 'column', color: '#FFD700' }}> \n                  <TableDesc color=\"#fdda00\">Total Stake:</TableDesc>\n                  <TableDesc2>49,341.17 RIO</TableDesc2> {/* Use the totalStake from state */}\n                </div>\n                <div style={{ display: 'flex', flexDirection: 'column', color: '#FFD700' }}> \n                  <TableDesc color=\"#fdda00\">APR:</TableDesc>\n                  <TableDesc2>-</TableDesc2> {/* Use the apr from state */}\n                </div>      \n              </Flex>\n            </TableRow>\n          </Flex>\n\n          <Flex justifyContent=\"center\" flexWrap=\"wrap\" style={{ gap: '1rem' }}>\n            <StakingCard style={{ minHeight: '420px', display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\n              <img src={LogoRonin} alt=\"RONIN\" style={{ width: '95px', height: '95px', marginBottom: '2rem' }} />\n              <Heading size=\"l\" color=\"cyan\"marginTop={\"1rem\"}>RONIN</Heading>\n              <InfoSection color=\"white\" style={{ textAlign: 'justify' }}>\n                Ronin Token is the native cryptocurrency of the Ronin blockchain, designed specifically for gaming and digital asset ownership.\n              </InfoSection>\n              <a href=\"https://app.roninchain.com/validator/0xea94e2f3f1b24214f9d9bfb5608084476f34d48a\" target=\"_blank\" rel=\"noopener noreferrer\" style={{ textDecoration: 'none', marginTop: 'auto' }}>\n                <InformativeButton style={{ marginTop: '2rem' }}>Stake</InformativeButton>\n              </a>\n            </StakingCard>\n            <StakingCard style={{ minHeight: '420px', display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\n              <img src={CarvIcon} alt=\"CARV\" style={{ width: '95px', height: '95px', marginBottom: '2rem' }} />\n              <Heading size=\"l\" color=\"cyan\" marginTop={\"1rem\"}>CARV</Heading>\n              <InfoSection color=\"white\" style={{ textAlign: 'justify' }}>\n                Carv Token is a utility cryptocurrency designed to enhance the Carv ecosystem, which focuses on decentralized social networking and user-generated content.\n              </InfoSection>\n              <a href=\"https://explorer.carv.io/verifiers\" target=\"_blank\" rel=\"noopener noreferrer\" style={{ textDecoration: 'none', marginTop: 'auto' }}>\n                <InformativeButton style={{ marginTop: '2rem' }}>Stake</InformativeButton>\n              </a>\n            </StakingCard>\n            <StakingCard style={{ minHeight: '420px', display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\n              <img src={RioImg} alt=\"CARV\" style={{ width: '95px', height: '95px', marginBottom: '2rem' }} />\n              <Heading size=\"l\" color=\"cyan\" marginTop={\"1rem\"}>RIO</Heading>\n              <InfoSection color=\"white\" style={{ textAlign: 'justify' }}>\n                The Realio Network (RIO) is a cryptocurrency and utility token that serves as the native currency for the Realio Network platform. This platform is a comprehensive Software as a Service (SaaS) designed to tokenize real-world assets (RWAs) on the blockchain.\n              </InfoSection>\n              <a href=\"https://app.realio.network/validator/realiovaloper12szn0m0w5sjs0nkw0s8ws8y5d0g69303uuuray\" target=\"_blank\" rel=\"noopener noreferrer\" style={{ textDecoration: 'none', marginTop: 'auto' }}>\n                <InformativeButton style={{ marginTop: '2rem' }}>Stake</InformativeButton>\n              </a>\n            </StakingCard>\n          </Flex>\n        </div>\n      </div>\n    </BgPage>\n    </Page>\n  );\n};\n\nexport default Staking;\n","import React, { useState, useEffect } from 'react'\nimport useTabVisibility from 'hooks/useTabVisibility'\n\nconst FAST_INTERVAL = 10000\nconst SLOW_INTERVAL = 60000\n\nconst RefreshContext = React.createContext({ slow: 0, fast: 0 })\n\n// This context maintain 2 counters that can be used as a dependencies on other hooks to force a periodic refresh\nconst RefreshContextProvider = ({ children }) => {\n  const [slow, setSlow] = useState(0)\n  const [fast, setFast] = useState(0)\n  const { tabVisibleRef } = useTabVisibility()\n\n  useEffect(() => {\n    const interval = setInterval(async () => {\n      if (tabVisibleRef.current) {\n        setFast((prev) => prev + 1)\n      }\n    }, FAST_INTERVAL)\n    return () => clearInterval(interval)\n  }, [tabVisibleRef])\n\n  useEffect(() => {\n    const interval = setInterval(async () => {\n      if (tabVisibleRef.current) {\n        setSlow((prev) => prev + 1)\n      }\n    }, SLOW_INTERVAL)\n    return () => clearInterval(interval)\n  }, [tabVisibleRef])\n\n  return <RefreshContext.Provider value={{ slow, fast }}>{children}</RefreshContext.Provider>\n}\n\nexport { RefreshContext, RefreshContextProvider }\n","import {useContext} from 'react'\nimport {RefreshContext} from 'contexts/RefreshContext'\n\nconst useRefresh = () => {\n    const {fast, slow} = useContext(RefreshContext)\n    return {fastRefresh: fast, slowRefresh: slow}\n}\n\nexport default useRefresh\n","import {useEffect, useRef, useState} from 'react'\nimport Web3 from 'web3'\nimport {useWeb3React} from '@web3-react/core'\nimport {getWeb3NoAccount} from 'utils/web3'\n\n/**\n * Provides a web3 instance using the provider provided by useWallet\n * with a fallback of an httpProver\n * Recreate web3 instance only if the provider change\n */\nconst useWeb3 = () => {\n    const {library, chainId} = useWeb3React()\n    const refEth = useRef(library)\n    const web3NoAccount = getWeb3NoAccount(chainId?.toString())\n    const [web3, setweb3] = useState(library ? new Web3(library) : web3NoAccount)\n\n    useEffect(() => {\n        if (library !== refEth.current) {\n            setweb3(library ? new Web3(library) : web3NoAccount)\n            refEth.current = library\n        }\n    }, [library])\n\n    return web3\n}\n\nexport default useWeb3\n","import Web3 from 'web3'\nimport {HttpProviderOptions} from 'web3-core-helpers'\nimport getRpcUrl from 'utils/getRpcUrl'\n\nexport const getWeb3NoAccount = (chainId, web3?: Web3) => {\n    const RPC_URL2 = getRpcUrl(chainId)\n    const provider = new Web3.providers.HttpProvider(RPC_URL2, { timeout: 10000 } as HttpProviderOptions)\n\n    return new Web3(provider)\n}\n"],"names":["Card","styled","InformativeButton","Button","BgPage","padding","BGimage","HeadingGlow","Heading","glow","url","fastRefresh","useRefresh","useState","roninData","setRoninData","useEffect","fetchData","console","log","fetch","headers","response","ok","Error","json","validatorData","marketData","rawTotalStaked","Validator","totalStaked","toString","truncatedTotalStaked","length","slice","formattedTotalStaked","parseFloat","toLocaleString","maximumFractionDigits","formattedApr","apr","toFixed","formattedPrice","data","price","isNaN","Number","validator","market","error","TableDesc","TableDesc2","DescText","InfoSection","Flex","TableRow","TableRowContent","StakingCard","AnimatedText","DescTextContainer","useContext","ThemeContext","useWeb3","setPrice","setTotalStaked","setApr","useFetchRoninData","quote","USD","Page","style","position","zIndex","margin","window","innerWidth","paddingTop","display","gap","justifyContent","flexWrap","textAlign","alignContent","size","color","marginBottom","src","StakingImg","alt","width","paddingRight","paddingBottom","flexDirection","alignItems","LogoRonin","height","RioImg","minHeight","marginTop","href","target","rel","textDecoration","RefreshContext","React","slow","fast","slowRefresh","useWeb3React","library","chainId","refEth","useRef","web3NoAccount","getWeb3NoAccount","Web3","web3","setweb3","current","RPC_URL2","getRpcUrl","provider","timeout"],"sourceRoot":""}