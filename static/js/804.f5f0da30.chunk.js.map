{"version":3,"file":"static/js/804.f5f0da30.chunk.js","mappings":"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","sources":["../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","../node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js","../node_modules/bignumber.js/bignumber.mjs"],"sourcesContent":["function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}","import _typeof from \"./typeof.js\";\nexport default function _regeneratorRuntime() {\n  \"use strict\";\n  /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */\n\n  _regeneratorRuntime = function _regeneratorRuntime() {\n    return exports;\n  };\n\n  var exports = {},\n      Op = Object.prototype,\n      hasOwn = Op.hasOwnProperty,\n      $Symbol = \"function\" == typeof Symbol ? Symbol : {},\n      iteratorSymbol = $Symbol.iterator || \"@@iterator\",\n      asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\",\n      toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    return Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: !0,\n      configurable: !0,\n      writable: !0\n    }), obj[key];\n  }\n\n  try {\n    define({}, \"\");\n  } catch (err) {\n    define = function define(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator,\n        generator = Object.create(protoGenerator.prototype),\n        context = new Context(tryLocsList || []);\n    return generator._invoke = function (innerFn, self, context) {\n      var state = \"suspendedStart\";\n      return function (method, arg) {\n        if (\"executing\" === state) throw new Error(\"Generator is already running\");\n\n        if (\"completed\" === state) {\n          if (\"throw\" === method) throw arg;\n          return doneResult();\n        }\n\n        for (context.method = method, context.arg = arg;;) {\n          var delegate = context.delegate;\n\n          if (delegate) {\n            var delegateResult = maybeInvokeDelegate(delegate, context);\n\n            if (delegateResult) {\n              if (delegateResult === ContinueSentinel) continue;\n              return delegateResult;\n            }\n          }\n\n          if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) {\n            if (\"suspendedStart\" === state) throw state = \"completed\", context.arg;\n            context.dispatchException(context.arg);\n          } else \"return\" === context.method && context.abrupt(\"return\", context.arg);\n          state = \"executing\";\n          var record = tryCatch(innerFn, self, context);\n\n          if (\"normal\" === record.type) {\n            if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue;\n            return {\n              value: record.arg,\n              done: context.done\n            };\n          }\n\n          \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg);\n        }\n      };\n    }(innerFn, self, context), generator;\n  }\n\n  function tryCatch(fn, obj, arg) {\n    try {\n      return {\n        type: \"normal\",\n        arg: fn.call(obj, arg)\n      };\n    } catch (err) {\n      return {\n        type: \"throw\",\n        arg: err\n      };\n    }\n  }\n\n  exports.wrap = wrap;\n  var ContinueSentinel = {};\n\n  function Generator() {}\n\n  function GeneratorFunction() {}\n\n  function GeneratorFunctionPrototype() {}\n\n  var IteratorPrototype = {};\n  define(IteratorPrototype, iteratorSymbol, function () {\n    return this;\n  });\n  var getProto = Object.getPrototypeOf,\n      NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype);\n  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);\n\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function (method) {\n      define(prototype, method, function (arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n\n      if (\"throw\" !== record.type) {\n        var result = record.arg,\n            value = result.value;\n        return value && \"object\" == _typeof(value) && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) {\n          invoke(\"next\", value, resolve, reject);\n        }, function (err) {\n          invoke(\"throw\", err, resolve, reject);\n        }) : PromiseImpl.resolve(value).then(function (unwrapped) {\n          result.value = unwrapped, resolve(result);\n        }, function (error) {\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n\n      reject(record.arg);\n    }\n\n    var previousPromise;\n\n    this._invoke = function (method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function (resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();\n    };\n  }\n\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n\n    if (undefined === method) {\n      if (context.delegate = null, \"throw\" === context.method) {\n        if (delegate.iterator[\"return\"] && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method)) return ContinueSentinel;\n        context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n    if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel;\n    var info = record.arg;\n    return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel);\n  }\n\n  function pushTryEntry(locs) {\n    var entry = {\n      tryLoc: locs[0]\n    };\n    1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\", delete record.arg, entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    this.tryEntries = [{\n      tryLoc: \"root\"\n    }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0);\n  }\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) return iteratorMethod.call(iterable);\n      if (\"function\" == typeof iterable.next) return iterable;\n\n      if (!isNaN(iterable.length)) {\n        var i = -1,\n            next = function next() {\n          for (; ++i < iterable.length;) {\n            if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next;\n          }\n\n          return next.value = undefined, next.done = !0, next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    return {\n      next: doneResult\n    };\n  }\n\n  function doneResult() {\n    return {\n      value: undefined,\n      done: !0\n    };\n  }\n\n  return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, \"constructor\", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) {\n    var ctor = \"function\" == typeof genFun && genFun.constructor;\n    return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name));\n  }, exports.mark = function (genFun) {\n    return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun;\n  }, exports.awrap = function (arg) {\n    return {\n      __await: arg\n    };\n  }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () {\n    return this;\n  }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    void 0 === PromiseImpl && (PromiseImpl = Promise);\n    var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);\n    return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) {\n      return result.done ? result.value : iter.next();\n    });\n  }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () {\n    return this;\n  }), define(Gp, \"toString\", function () {\n    return \"[object Generator]\";\n  }), exports.keys = function (object) {\n    var keys = [];\n\n    for (var key in object) {\n      keys.push(key);\n    }\n\n    return keys.reverse(), function next() {\n      for (; keys.length;) {\n        var key = keys.pop();\n        if (key in object) return next.value = key, next.done = !1, next;\n      }\n\n      return next.done = !0, next;\n    };\n  }, exports.values = values, Context.prototype = {\n    constructor: Context,\n    reset: function reset(skipTempReset) {\n      if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) {\n        \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined);\n      }\n    },\n    stop: function stop() {\n      this.done = !0;\n      var rootRecord = this.tryEntries[0].completion;\n      if (\"throw\" === rootRecord.type) throw rootRecord.arg;\n      return this.rval;\n    },\n    dispatchException: function dispatchException(exception) {\n      if (this.done) throw exception;\n      var context = this;\n\n      function handle(loc, caught) {\n        return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i],\n            record = entry.completion;\n        if (\"root\" === entry.tryLoc) return handle(\"end\");\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\"),\n              hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);\n            if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);\n          } else {\n            if (!hasFinally) throw new Error(\"try statement without catch or finally\");\n            if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);\n          }\n        }\n      }\n    },\n    abrupt: function abrupt(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n\n        if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null);\n      var record = finallyEntry ? finallyEntry.completion : {};\n      return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record);\n    },\n    complete: function complete(record, afterLoc) {\n      if (\"throw\" === record.type) throw record.arg;\n      return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel;\n    },\n    finish: function finish(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel;\n      }\n    },\n    \"catch\": function _catch(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n\n          if (\"throw\" === record.type) {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n\n          return thrown;\n        }\n      }\n\n      throw new Error(\"illegal catch attempt\");\n    },\n    delegateYield: function delegateYield(iterable, resultName, nextLoc) {\n      return this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel;\n    }\n  }, exports;\n}","/*\r\n *      bignumber.js v9.1.0\r\n *      A JavaScript library for arbitrary-precision arithmetic.\r\n *      https://github.com/MikeMcl/bignumber.js\r\n *      Copyright (c) 2022 Michael Mclaughlin <M8ch88l@gmail.com>\r\n *      MIT Licensed.\r\n *\r\n *      BigNumber.prototype methods     |  BigNumber methods\r\n *                                      |\r\n *      absoluteValue            abs    |  clone\r\n *      comparedTo                      |  config               set\r\n *      decimalPlaces            dp     |      DECIMAL_PLACES\r\n *      dividedBy                div    |      ROUNDING_MODE\r\n *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT\r\n *      exponentiatedBy          pow    |      RANGE\r\n *      integerValue                    |      CRYPTO\r\n *      isEqualTo                eq     |      MODULO_MODE\r\n *      isFinite                        |      POW_PRECISION\r\n *      isGreaterThan            gt     |      FORMAT\r\n *      isGreaterThanOrEqualTo   gte    |      ALPHABET\r\n *      isInteger                       |  isBigNumber\r\n *      isLessThan               lt     |  maximum              max\r\n *      isLessThanOrEqualTo      lte    |  minimum              min\r\n *      isNaN                           |  random\r\n *      isNegative                      |  sum\r\n *      isPositive                      |\r\n *      isZero                          |\r\n *      minus                           |\r\n *      modulo                   mod    |\r\n *      multipliedBy             times  |\r\n *      negated                         |\r\n *      plus                            |\r\n *      precision                sd     |\r\n *      shiftedBy                       |\r\n *      squareRoot               sqrt   |\r\n *      toExponential                   |\r\n *      toFixed                         |\r\n *      toFormat                        |\r\n *      toFraction                      |\r\n *      toJSON                          |\r\n *      toNumber                        |\r\n *      toPrecision                     |\r\n *      toString                        |\r\n *      valueOf                         |\r\n *\r\n */\r\n\r\n\r\nvar\r\n  isNumeric = /^-?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?$/i,\r\n  mathceil = Math.ceil,\r\n  mathfloor = Math.floor,\r\n\r\n  bignumberError = '[BigNumber Error] ',\r\n  tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',\r\n\r\n  BASE = 1e14,\r\n  LOG_BASE = 14,\r\n  MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1\r\n  // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1\r\n  POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],\r\n  SQRT_BASE = 1e7,\r\n\r\n  // EDITABLE\r\n  // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and\r\n  // the arguments to toExponential, toFixed, toFormat, and toPrecision.\r\n  MAX = 1E9;                                   // 0 to MAX_INT32\r\n\r\n\r\n/*\r\n * Create and return a BigNumber constructor.\r\n */\r\nfunction clone(configObject) {\r\n  var div, convertBase, parseNumeric,\r\n    P = BigNumber.prototype = { constructor: BigNumber, toString: null, valueOf: null },\r\n    ONE = new BigNumber(1),\r\n\r\n\r\n    //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------\r\n\r\n\r\n    // The default values below must be integers within the inclusive ranges stated.\r\n    // The values can also be changed at run-time using BigNumber.set.\r\n\r\n    // The maximum number of decimal places for operations involving division.\r\n    DECIMAL_PLACES = 20,                     // 0 to MAX\r\n\r\n    // The rounding mode used when rounding to the above decimal places, and when using\r\n    // toExponential, toFixed, toFormat and toPrecision, and round (default value).\r\n    // UP         0 Away from zero.\r\n    // DOWN       1 Towards zero.\r\n    // CEIL       2 Towards +Infinity.\r\n    // FLOOR      3 Towards -Infinity.\r\n    // HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n    // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n    // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n    // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n    // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n    ROUNDING_MODE = 4,                       // 0 to 8\r\n\r\n    // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]\r\n\r\n    // The exponent value at and beneath which toString returns exponential notation.\r\n    // Number type: -7\r\n    TO_EXP_NEG = -7,                         // 0 to -MAX\r\n\r\n    // The exponent value at and above which toString returns exponential notation.\r\n    // Number type: 21\r\n    TO_EXP_POS = 21,                         // 0 to MAX\r\n\r\n    // RANGE : [MIN_EXP, MAX_EXP]\r\n\r\n    // The minimum exponent value, beneath which underflow to zero occurs.\r\n    // Number type: -324  (5e-324)\r\n    MIN_EXP = -1e7,                          // -1 to -MAX\r\n\r\n    // The maximum exponent value, above which overflow to Infinity occurs.\r\n    // Number type:  308  (1.7976931348623157e+308)\r\n    // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.\r\n    MAX_EXP = 1e7,                           // 1 to MAX\r\n\r\n    // Whether to use cryptographically-secure random number generation, if available.\r\n    CRYPTO = false,                          // true or false\r\n\r\n    // The modulo mode used when calculating the modulus: a mod n.\r\n    // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\r\n    // The remainder (r) is calculated as: r = a - n * q.\r\n    //\r\n    // UP        0 The remainder is positive if the dividend is negative, else is negative.\r\n    // DOWN      1 The remainder has the same sign as the dividend.\r\n    //             This modulo mode is commonly known as 'truncated division' and is\r\n    //             equivalent to (a % n) in JavaScript.\r\n    // FLOOR     3 The remainder has the same sign as the divisor (Python %).\r\n    // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.\r\n    // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).\r\n    //             The remainder is always positive.\r\n    //\r\n    // The truncated division, floored division, Euclidian division and IEEE 754 remainder\r\n    // modes are commonly used for the modulus operation.\r\n    // Although the other rounding modes can also be used, they may not give useful results.\r\n    MODULO_MODE = 1,                         // 0 to 9\r\n\r\n    // The maximum number of significant digits of the result of the exponentiatedBy operation.\r\n    // If POW_PRECISION is 0, there will be unlimited significant digits.\r\n    POW_PRECISION = 0,                       // 0 to MAX\r\n\r\n    // The format specification used by the BigNumber.prototype.toFormat method.\r\n    FORMAT = {\r\n      prefix: '',\r\n      groupSize: 3,\r\n      secondaryGroupSize: 0,\r\n      groupSeparator: ',',\r\n      decimalSeparator: '.',\r\n      fractionGroupSize: 0,\r\n      fractionGroupSeparator: '\\xA0',        // non-breaking space\r\n      suffix: ''\r\n    },\r\n\r\n    // The alphabet used for base conversion. It must be at least 2 characters long, with no '+',\r\n    // '-', '.', whitespace, or repeated character.\r\n    // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'\r\n    ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz',\r\n    alphabetHasNormalDecimalDigits = true;\r\n\r\n\r\n  //------------------------------------------------------------------------------------------\r\n\r\n\r\n  // CONSTRUCTOR\r\n\r\n\r\n  /*\r\n   * The BigNumber constructor and exported function.\r\n   * Create and return a new instance of a BigNumber object.\r\n   *\r\n   * v {number|string|BigNumber} A numeric value.\r\n   * [b] {number} The base of v. Integer, 2 to ALPHABET.length inclusive.\r\n   */\r\n  function BigNumber(v, b) {\r\n    var alphabet, c, caseChanged, e, i, isNum, len, str,\r\n      x = this;\r\n\r\n    // Enable constructor call without `new`.\r\n    if (!(x instanceof BigNumber)) return new BigNumber(v, b);\r\n\r\n    if (b == null) {\r\n\r\n      if (v && v._isBigNumber === true) {\r\n        x.s = v.s;\r\n\r\n        if (!v.c || v.e > MAX_EXP) {\r\n          x.c = x.e = null;\r\n        } else if (v.e < MIN_EXP) {\r\n          x.c = [x.e = 0];\r\n        } else {\r\n          x.e = v.e;\r\n          x.c = v.c.slice();\r\n        }\r\n\r\n        return;\r\n      }\r\n\r\n      if ((isNum = typeof v == 'number') && v * 0 == 0) {\r\n\r\n        // Use `1 / n` to handle minus zero also.\r\n        x.s = 1 / v < 0 ? (v = -v, -1) : 1;\r\n\r\n        // Fast path for integers, where n < 2147483648 (2**31).\r\n        if (v === ~~v) {\r\n          for (e = 0, i = v; i >= 10; i /= 10, e++);\r\n\r\n          if (e > MAX_EXP) {\r\n            x.c = x.e = null;\r\n          } else {\r\n            x.e = e;\r\n            x.c = [v];\r\n          }\r\n\r\n          return;\r\n        }\r\n\r\n        str = String(v);\r\n      } else {\r\n\r\n        if (!isNumeric.test(str = String(v))) return parseNumeric(x, str, isNum);\r\n\r\n        x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;\r\n      }\r\n\r\n      // Decimal point?\r\n      if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n\r\n      // Exponential form?\r\n      if ((i = str.search(/e/i)) > 0) {\r\n\r\n        // Determine exponent.\r\n        if (e < 0) e = i;\r\n        e += +str.slice(i + 1);\r\n        str = str.substring(0, i);\r\n      } else if (e < 0) {\r\n\r\n        // Integer.\r\n        e = str.length;\r\n      }\r\n\r\n    } else {\r\n\r\n      // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n      intCheck(b, 2, ALPHABET.length, 'Base');\r\n\r\n      // Allow exponential notation to be used with base 10 argument, while\r\n      // also rounding to DECIMAL_PLACES as with other bases.\r\n      if (b == 10 && alphabetHasNormalDecimalDigits) {\r\n        x = new BigNumber(v);\r\n        return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);\r\n      }\r\n\r\n      str = String(v);\r\n\r\n      if (isNum = typeof v == 'number') {\r\n\r\n        // Avoid potential interpretation of Infinity and NaN as base 44+ values.\r\n        if (v * 0 != 0) return parseNumeric(x, str, isNum, b);\r\n\r\n        x.s = 1 / v < 0 ? (str = str.slice(1), -1) : 1;\r\n\r\n        // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n        if (BigNumber.DEBUG && str.replace(/^0\\.0*|\\./, '').length > 15) {\r\n          throw Error\r\n           (tooManyDigits + v);\r\n        }\r\n      } else {\r\n        x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;\r\n      }\r\n\r\n      alphabet = ALPHABET.slice(0, b);\r\n      e = i = 0;\r\n\r\n      // Check that str is a valid base b number.\r\n      // Don't use RegExp, so alphabet can contain special characters.\r\n      for (len = str.length; i < len; i++) {\r\n        if (alphabet.indexOf(c = str.charAt(i)) < 0) {\r\n          if (c == '.') {\r\n\r\n            // If '.' is not the first character and it has not be found before.\r\n            if (i > e) {\r\n              e = len;\r\n              continue;\r\n            }\r\n          } else if (!caseChanged) {\r\n\r\n            // Allow e.g. hexadecimal 'FF' as well as 'ff'.\r\n            if (str == str.toUpperCase() && (str = str.toLowerCase()) ||\r\n                str == str.toLowerCase() && (str = str.toUpperCase())) {\r\n              caseChanged = true;\r\n              i = -1;\r\n              e = 0;\r\n              continue;\r\n            }\r\n          }\r\n\r\n          return parseNumeric(x, String(v), isNum, b);\r\n        }\r\n      }\r\n\r\n      // Prevent later check for length on converted number.\r\n      isNum = false;\r\n      str = convertBase(str, b, 10, x.s);\r\n\r\n      // Decimal point?\r\n      if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n      else e = str.length;\r\n    }\r\n\r\n    // Determine leading zeros.\r\n    for (i = 0; str.charCodeAt(i) === 48; i++);\r\n\r\n    // Determine trailing zeros.\r\n    for (len = str.length; str.charCodeAt(--len) === 48;);\r\n\r\n    if (str = str.slice(i, ++len)) {\r\n      len -= i;\r\n\r\n      // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n      if (isNum && BigNumber.DEBUG &&\r\n        len > 15 && (v > MAX_SAFE_INTEGER || v !== mathfloor(v))) {\r\n          throw Error\r\n           (tooManyDigits + (x.s * v));\r\n      }\r\n\r\n       // Overflow?\r\n      if ((e = e - i - 1) > MAX_EXP) {\r\n\r\n        // Infinity.\r\n        x.c = x.e = null;\r\n\r\n      // Underflow?\r\n      } else if (e < MIN_EXP) {\r\n\r\n        // Zero.\r\n        x.c = [x.e = 0];\r\n      } else {\r\n        x.e = e;\r\n        x.c = [];\r\n\r\n        // Transform base\r\n\r\n        // e is the base 10 exponent.\r\n        // i is where to slice str to get the first element of the coefficient array.\r\n        i = (e + 1) % LOG_BASE;\r\n        if (e < 0) i += LOG_BASE;  // i < 1\r\n\r\n        if (i < len) {\r\n          if (i) x.c.push(+str.slice(0, i));\r\n\r\n          for (len -= LOG_BASE; i < len;) {\r\n            x.c.push(+str.slice(i, i += LOG_BASE));\r\n          }\r\n\r\n          i = LOG_BASE - (str = str.slice(i)).length;\r\n        } else {\r\n          i -= len;\r\n        }\r\n\r\n        for (; i--; str += '0');\r\n        x.c.push(+str);\r\n      }\r\n    } else {\r\n\r\n      // Zero.\r\n      x.c = [x.e = 0];\r\n    }\r\n  }\r\n\r\n\r\n  // CONSTRUCTOR PROPERTIES\r\n\r\n\r\n  BigNumber.clone = clone;\r\n\r\n  BigNumber.ROUND_UP = 0;\r\n  BigNumber.ROUND_DOWN = 1;\r\n  BigNumber.ROUND_CEIL = 2;\r\n  BigNumber.ROUND_FLOOR = 3;\r\n  BigNumber.ROUND_HALF_UP = 4;\r\n  BigNumber.ROUND_HALF_DOWN = 5;\r\n  BigNumber.ROUND_HALF_EVEN = 6;\r\n  BigNumber.ROUND_HALF_CEIL = 7;\r\n  BigNumber.ROUND_HALF_FLOOR = 8;\r\n  BigNumber.EUCLID = 9;\r\n\r\n\r\n  /*\r\n   * Configure infrequently-changing library-wide settings.\r\n   *\r\n   * Accept an object with the following optional properties (if the value of a property is\r\n   * a number, it must be an integer within the inclusive range stated):\r\n   *\r\n   *   DECIMAL_PLACES   {number}           0 to MAX\r\n   *   ROUNDING_MODE    {number}           0 to 8\r\n   *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]\r\n   *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]\r\n   *   CRYPTO           {boolean}          true or false\r\n   *   MODULO_MODE      {number}           0 to 9\r\n   *   POW_PRECISION       {number}           0 to MAX\r\n   *   ALPHABET         {string}           A string of two or more unique characters which does\r\n   *                                       not contain '.'.\r\n   *   FORMAT           {object}           An object with some of the following properties:\r\n   *     prefix                 {string}\r\n   *     groupSize              {number}\r\n   *     secondaryGroupSize     {number}\r\n   *     groupSeparator         {string}\r\n   *     decimalSeparator       {string}\r\n   *     fractionGroupSize      {number}\r\n   *     fractionGroupSeparator {string}\r\n   *     suffix                 {string}\r\n   *\r\n   * (The values assigned to the above FORMAT object properties are not checked for validity.)\r\n   *\r\n   * E.g.\r\n   * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })\r\n   *\r\n   * Ignore properties/parameters set to null or undefined, except for ALPHABET.\r\n   *\r\n   * Return an object with the properties current values.\r\n   */\r\n  BigNumber.config = BigNumber.set = function (obj) {\r\n    var p, v;\r\n\r\n    if (obj != null) {\r\n\r\n      if (typeof obj == 'object') {\r\n\r\n        // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.\r\n        // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'\r\n        if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {\r\n          v = obj[p];\r\n          intCheck(v, 0, MAX, p);\r\n          DECIMAL_PLACES = v;\r\n        }\r\n\r\n        // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.\r\n        // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n        if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {\r\n          v = obj[p];\r\n          intCheck(v, 0, 8, p);\r\n          ROUNDING_MODE = v;\r\n        }\r\n\r\n        // EXPONENTIAL_AT {number|number[]}\r\n        // Integer, -MAX to MAX inclusive or\r\n        // [integer -MAX to 0 inclusive, 0 to MAX inclusive].\r\n        // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'\r\n        if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {\r\n          v = obj[p];\r\n          if (v && v.pop) {\r\n            intCheck(v[0], -MAX, 0, p);\r\n            intCheck(v[1], 0, MAX, p);\r\n            TO_EXP_NEG = v[0];\r\n            TO_EXP_POS = v[1];\r\n          } else {\r\n            intCheck(v, -MAX, MAX, p);\r\n            TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);\r\n          }\r\n        }\r\n\r\n        // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or\r\n        // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].\r\n        // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'\r\n        if (obj.hasOwnProperty(p = 'RANGE')) {\r\n          v = obj[p];\r\n          if (v && v.pop) {\r\n            intCheck(v[0], -MAX, -1, p);\r\n            intCheck(v[1], 1, MAX, p);\r\n            MIN_EXP = v[0];\r\n            MAX_EXP = v[1];\r\n          } else {\r\n            intCheck(v, -MAX, MAX, p);\r\n            if (v) {\r\n              MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' cannot be zero: ' + v);\r\n            }\r\n          }\r\n        }\r\n\r\n        // CRYPTO {boolean} true or false.\r\n        // '[BigNumber Error] CRYPTO not true or false: {v}'\r\n        // '[BigNumber Error] crypto unavailable'\r\n        if (obj.hasOwnProperty(p = 'CRYPTO')) {\r\n          v = obj[p];\r\n          if (v === !!v) {\r\n            if (v) {\r\n              if (typeof crypto != 'undefined' && crypto &&\r\n               (crypto.getRandomValues || crypto.randomBytes)) {\r\n                CRYPTO = v;\r\n              } else {\r\n                CRYPTO = !v;\r\n                throw Error\r\n                 (bignumberError + 'crypto unavailable');\r\n              }\r\n            } else {\r\n              CRYPTO = v;\r\n            }\r\n          } else {\r\n            throw Error\r\n             (bignumberError + p + ' not true or false: ' + v);\r\n          }\r\n        }\r\n\r\n        // MODULO_MODE {number} Integer, 0 to 9 inclusive.\r\n        // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n        if (obj.hasOwnProperty(p = 'MODULO_MODE')) {\r\n          v = obj[p];\r\n          intCheck(v, 0, 9, p);\r\n          MODULO_MODE = v;\r\n        }\r\n\r\n        // POW_PRECISION {number} Integer, 0 to MAX inclusive.\r\n        // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'\r\n        if (obj.hasOwnProperty(p = 'POW_PRECISION')) {\r\n          v = obj[p];\r\n          intCheck(v, 0, MAX, p);\r\n          POW_PRECISION = v;\r\n        }\r\n\r\n        // FORMAT {object}\r\n        // '[BigNumber Error] FORMAT not an object: {v}'\r\n        if (obj.hasOwnProperty(p = 'FORMAT')) {\r\n          v = obj[p];\r\n          if (typeof v == 'object') FORMAT = v;\r\n          else throw Error\r\n           (bignumberError + p + ' not an object: ' + v);\r\n        }\r\n\r\n        // ALPHABET {string}\r\n        // '[BigNumber Error] ALPHABET invalid: {v}'\r\n        if (obj.hasOwnProperty(p = 'ALPHABET')) {\r\n          v = obj[p];\r\n\r\n          // Disallow if less than two characters,\r\n          // or if it contains '+', '-', '.', whitespace, or a repeated character.\r\n          if (typeof v == 'string' && !/^.?$|[+\\-.\\s]|(.).*\\1/.test(v)) {\r\n            alphabetHasNormalDecimalDigits = v.slice(0, 10) == '0123456789';\r\n            ALPHABET = v;\r\n          } else {\r\n            throw Error\r\n             (bignumberError + p + ' invalid: ' + v);\r\n          }\r\n        }\r\n\r\n      } else {\r\n\r\n        // '[BigNumber Error] Object expected: {v}'\r\n        throw Error\r\n         (bignumberError + 'Object expected: ' + obj);\r\n      }\r\n    }\r\n\r\n    return {\r\n      DECIMAL_PLACES: DECIMAL_PLACES,\r\n      ROUNDING_MODE: ROUNDING_MODE,\r\n      EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],\r\n      RANGE: [MIN_EXP, MAX_EXP],\r\n      CRYPTO: CRYPTO,\r\n      MODULO_MODE: MODULO_MODE,\r\n      POW_PRECISION: POW_PRECISION,\r\n      FORMAT: FORMAT,\r\n      ALPHABET: ALPHABET\r\n    };\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if v is a BigNumber instance, otherwise return false.\r\n   *\r\n   * If BigNumber.DEBUG is true, throw if a BigNumber instance is not well-formed.\r\n   *\r\n   * v {any}\r\n   *\r\n   * '[BigNumber Error] Invalid BigNumber: {v}'\r\n   */\r\n  BigNumber.isBigNumber = function (v) {\r\n    if (!v || v._isBigNumber !== true) return false;\r\n    if (!BigNumber.DEBUG) return true;\r\n\r\n    var i, n,\r\n      c = v.c,\r\n      e = v.e,\r\n      s = v.s;\r\n\r\n    out: if ({}.toString.call(c) == '[object Array]') {\r\n\r\n      if ((s === 1 || s === -1) && e >= -MAX && e <= MAX && e === mathfloor(e)) {\r\n\r\n        // If the first element is zero, the BigNumber value must be zero.\r\n        if (c[0] === 0) {\r\n          if (e === 0 && c.length === 1) return true;\r\n          break out;\r\n        }\r\n\r\n        // Calculate number of digits that c[0] should have, based on the exponent.\r\n        i = (e + 1) % LOG_BASE;\r\n        if (i < 1) i += LOG_BASE;\r\n\r\n        // Calculate number of digits of c[0].\r\n        //if (Math.ceil(Math.log(c[0] + 1) / Math.LN10) == i) {\r\n        if (String(c[0]).length == i) {\r\n\r\n          for (i = 0; i < c.length; i++) {\r\n            n = c[i];\r\n            if (n < 0 || n >= BASE || n !== mathfloor(n)) break out;\r\n          }\r\n\r\n          // Last element cannot be zero, unless it is the only element.\r\n          if (n !== 0) return true;\r\n        }\r\n      }\r\n\r\n    // Infinity/NaN\r\n    } else if (c === null && e === null && (s === null || s === 1 || s === -1)) {\r\n      return true;\r\n    }\r\n\r\n    throw Error\r\n      (bignumberError + 'Invalid BigNumber: ' + v);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the maximum of the arguments.\r\n   *\r\n   * arguments {number|string|BigNumber}\r\n   */\r\n  BigNumber.maximum = BigNumber.max = function () {\r\n    return maxOrMin(arguments, P.lt);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the minimum of the arguments.\r\n   *\r\n   * arguments {number|string|BigNumber}\r\n   */\r\n  BigNumber.minimum = BigNumber.min = function () {\r\n    return maxOrMin(arguments, P.gt);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,\r\n   * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing\r\n   * zeros are produced).\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'\r\n   * '[BigNumber Error] crypto unavailable'\r\n   */\r\n  BigNumber.random = (function () {\r\n    var pow2_53 = 0x20000000000000;\r\n\r\n    // Return a 53 bit integer n, where 0 <= n < 9007199254740992.\r\n    // Check if Math.random() produces more than 32 bits of randomness.\r\n    // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.\r\n    // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.\r\n    var random53bitInt = (Math.random() * pow2_53) & 0x1fffff\r\n     ? function () { return mathfloor(Math.random() * pow2_53); }\r\n     : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +\r\n       (Math.random() * 0x800000 | 0); };\r\n\r\n    return function (dp) {\r\n      var a, b, e, k, v,\r\n        i = 0,\r\n        c = [],\r\n        rand = new BigNumber(ONE);\r\n\r\n      if (dp == null) dp = DECIMAL_PLACES;\r\n      else intCheck(dp, 0, MAX);\r\n\r\n      k = mathceil(dp / LOG_BASE);\r\n\r\n      if (CRYPTO) {\r\n\r\n        // Browsers supporting crypto.getRandomValues.\r\n        if (crypto.getRandomValues) {\r\n\r\n          a = crypto.getRandomValues(new Uint32Array(k *= 2));\r\n\r\n          for (; i < k;) {\r\n\r\n            // 53 bits:\r\n            // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)\r\n            // 11111 11111111 11111111 11111111 11100000 00000000 00000000\r\n            // ((Math.pow(2, 32) - 1) >>> 11).toString(2)\r\n            //                                     11111 11111111 11111111\r\n            // 0x20000 is 2^21.\r\n            v = a[i] * 0x20000 + (a[i + 1] >>> 11);\r\n\r\n            // Rejection sampling:\r\n            // 0 <= v < 9007199254740992\r\n            // Probability that v >= 9e15, is\r\n            // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251\r\n            if (v >= 9e15) {\r\n              b = crypto.getRandomValues(new Uint32Array(2));\r\n              a[i] = b[0];\r\n              a[i + 1] = b[1];\r\n            } else {\r\n\r\n              // 0 <= v <= 8999999999999999\r\n              // 0 <= (v % 1e14) <= 99999999999999\r\n              c.push(v % 1e14);\r\n              i += 2;\r\n            }\r\n          }\r\n          i = k / 2;\r\n\r\n        // Node.js supporting crypto.randomBytes.\r\n        } else if (crypto.randomBytes) {\r\n\r\n          // buffer\r\n          a = crypto.randomBytes(k *= 7);\r\n\r\n          for (; i < k;) {\r\n\r\n            // 0x1000000000000 is 2^48, 0x10000000000 is 2^40\r\n            // 0x100000000 is 2^32, 0x1000000 is 2^24\r\n            // 11111 11111111 11111111 11111111 11111111 11111111 11111111\r\n            // 0 <= v < 9007199254740992\r\n            v = ((a[i] & 31) * 0x1000000000000) + (a[i + 1] * 0x10000000000) +\r\n               (a[i + 2] * 0x100000000) + (a[i + 3] * 0x1000000) +\r\n               (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];\r\n\r\n            if (v >= 9e15) {\r\n              crypto.randomBytes(7).copy(a, i);\r\n            } else {\r\n\r\n              // 0 <= (v % 1e14) <= 99999999999999\r\n              c.push(v % 1e14);\r\n              i += 7;\r\n            }\r\n          }\r\n          i = k / 7;\r\n        } else {\r\n          CRYPTO = false;\r\n          throw Error\r\n           (bignumberError + 'crypto unavailable');\r\n        }\r\n      }\r\n\r\n      // Use Math.random.\r\n      if (!CRYPTO) {\r\n\r\n        for (; i < k;) {\r\n          v = random53bitInt();\r\n          if (v < 9e15) c[i++] = v % 1e14;\r\n        }\r\n      }\r\n\r\n      k = c[--i];\r\n      dp %= LOG_BASE;\r\n\r\n      // Convert trailing digits to zeros according to dp.\r\n      if (k && dp) {\r\n        v = POWS_TEN[LOG_BASE - dp];\r\n        c[i] = mathfloor(k / v) * v;\r\n      }\r\n\r\n      // Remove trailing elements which are zero.\r\n      for (; c[i] === 0; c.pop(), i--);\r\n\r\n      // Zero?\r\n      if (i < 0) {\r\n        c = [e = 0];\r\n      } else {\r\n\r\n        // Remove leading elements which are zero and adjust exponent accordingly.\r\n        for (e = -1 ; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);\r\n\r\n        // Count the digits of the first element of c to determine leading zeros, and...\r\n        for (i = 1, v = c[0]; v >= 10; v /= 10, i++);\r\n\r\n        // adjust the exponent accordingly.\r\n        if (i < LOG_BASE) e -= LOG_BASE - i;\r\n      }\r\n\r\n      rand.e = e;\r\n      rand.c = c;\r\n      return rand;\r\n    };\r\n  })();\r\n\r\n\r\n   /*\r\n   * Return a BigNumber whose value is the sum of the arguments.\r\n   *\r\n   * arguments {number|string|BigNumber}\r\n   */\r\n  BigNumber.sum = function () {\r\n    var i = 1,\r\n      args = arguments,\r\n      sum = new BigNumber(args[0]);\r\n    for (; i < args.length;) sum = sum.plus(args[i++]);\r\n    return sum;\r\n  };\r\n\r\n\r\n  // PRIVATE FUNCTIONS\r\n\r\n\r\n  // Called by BigNumber and BigNumber.prototype.toString.\r\n  convertBase = (function () {\r\n    var decimal = '0123456789';\r\n\r\n    /*\r\n     * Convert string of baseIn to an array of numbers of baseOut.\r\n     * Eg. toBaseOut('255', 10, 16) returns [15, 15].\r\n     * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].\r\n     */\r\n    function toBaseOut(str, baseIn, baseOut, alphabet) {\r\n      var j,\r\n        arr = [0],\r\n        arrL,\r\n        i = 0,\r\n        len = str.length;\r\n\r\n      for (; i < len;) {\r\n        for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);\r\n\r\n        arr[0] += alphabet.indexOf(str.charAt(i++));\r\n\r\n        for (j = 0; j < arr.length; j++) {\r\n\r\n          if (arr[j] > baseOut - 1) {\r\n            if (arr[j + 1] == null) arr[j + 1] = 0;\r\n            arr[j + 1] += arr[j] / baseOut | 0;\r\n            arr[j] %= baseOut;\r\n          }\r\n        }\r\n      }\r\n\r\n      return arr.reverse();\r\n    }\r\n\r\n    // Convert a numeric string of baseIn to a numeric string of baseOut.\r\n    // If the caller is toString, we are converting from base 10 to baseOut.\r\n    // If the caller is BigNumber, we are converting from baseIn to base 10.\r\n    return function (str, baseIn, baseOut, sign, callerIsToString) {\r\n      var alphabet, d, e, k, r, x, xc, y,\r\n        i = str.indexOf('.'),\r\n        dp = DECIMAL_PLACES,\r\n        rm = ROUNDING_MODE;\r\n\r\n      // Non-integer.\r\n      if (i >= 0) {\r\n        k = POW_PRECISION;\r\n\r\n        // Unlimited precision.\r\n        POW_PRECISION = 0;\r\n        str = str.replace('.', '');\r\n        y = new BigNumber(baseIn);\r\n        x = y.pow(str.length - i);\r\n        POW_PRECISION = k;\r\n\r\n        // Convert str as if an integer, then restore the fraction part by dividing the\r\n        // result by its base raised to a power.\r\n\r\n        y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'),\r\n         10, baseOut, decimal);\r\n        y.e = y.c.length;\r\n      }\r\n\r\n      // Convert the number as integer.\r\n\r\n      xc = toBaseOut(str, baseIn, baseOut, callerIsToString\r\n       ? (alphabet = ALPHABET, decimal)\r\n       : (alphabet = decimal, ALPHABET));\r\n\r\n      // xc now represents str as an integer and converted to baseOut. e is the exponent.\r\n      e = k = xc.length;\r\n\r\n      // Remove trailing zeros.\r\n      for (; xc[--k] == 0; xc.pop());\r\n\r\n      // Zero?\r\n      if (!xc[0]) return alphabet.charAt(0);\r\n\r\n      // Does str represent an integer? If so, no need for the division.\r\n      if (i < 0) {\r\n        --e;\r\n      } else {\r\n        x.c = xc;\r\n        x.e = e;\r\n\r\n        // The sign is needed for correct rounding.\r\n        x.s = sign;\r\n        x = div(x, y, dp, rm, baseOut);\r\n        xc = x.c;\r\n        r = x.r;\r\n        e = x.e;\r\n      }\r\n\r\n      // xc now represents str converted to baseOut.\r\n\r\n      // THe index of the rounding digit.\r\n      d = e + dp + 1;\r\n\r\n      // The rounding digit: the digit to the right of the digit that may be rounded up.\r\n      i = xc[d];\r\n\r\n      // Look at the rounding digits and mode to determine whether to round up.\r\n\r\n      k = baseOut / 2;\r\n      r = r || d < 0 || xc[d + 1] != null;\r\n\r\n      r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n            : i > k || i == k &&(rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||\r\n             rm == (x.s < 0 ? 8 : 7));\r\n\r\n      // If the index of the rounding digit is not greater than zero, or xc represents\r\n      // zero, then the result of the base conversion is zero or, if rounding up, a value\r\n      // such as 0.00001.\r\n      if (d < 1 || !xc[0]) {\r\n\r\n        // 1^-dp or 0\r\n        str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);\r\n      } else {\r\n\r\n        // Truncate xc to the required number of decimal places.\r\n        xc.length = d;\r\n\r\n        // Round up?\r\n        if (r) {\r\n\r\n          // Rounding up may mean the previous digit has to be rounded up and so on.\r\n          for (--baseOut; ++xc[--d] > baseOut;) {\r\n            xc[d] = 0;\r\n\r\n            if (!d) {\r\n              ++e;\r\n              xc = [1].concat(xc);\r\n            }\r\n          }\r\n        }\r\n\r\n        // Determine trailing zeros.\r\n        for (k = xc.length; !xc[--k];);\r\n\r\n        // E.g. [4, 11, 15] becomes 4bf.\r\n        for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++]));\r\n\r\n        // Add leading zeros, decimal point and trailing zeros as required.\r\n        str = toFixedPoint(str, e, alphabet.charAt(0));\r\n      }\r\n\r\n      // The caller will add the sign.\r\n      return str;\r\n    };\r\n  })();\r\n\r\n\r\n  // Perform division in the specified base. Called by div and convertBase.\r\n  div = (function () {\r\n\r\n    // Assume non-zero x and k.\r\n    function multiply(x, k, base) {\r\n      var m, temp, xlo, xhi,\r\n        carry = 0,\r\n        i = x.length,\r\n        klo = k % SQRT_BASE,\r\n        khi = k / SQRT_BASE | 0;\r\n\r\n      for (x = x.slice(); i--;) {\r\n        xlo = x[i] % SQRT_BASE;\r\n        xhi = x[i] / SQRT_BASE | 0;\r\n        m = khi * xlo + xhi * klo;\r\n        temp = klo * xlo + ((m % SQRT_BASE) * SQRT_BASE) + carry;\r\n        carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;\r\n        x[i] = temp % base;\r\n      }\r\n\r\n      if (carry) x = [carry].concat(x);\r\n\r\n      return x;\r\n    }\r\n\r\n    function compare(a, b, aL, bL) {\r\n      var i, cmp;\r\n\r\n      if (aL != bL) {\r\n        cmp = aL > bL ? 1 : -1;\r\n      } else {\r\n\r\n        for (i = cmp = 0; i < aL; i++) {\r\n\r\n          if (a[i] != b[i]) {\r\n            cmp = a[i] > b[i] ? 1 : -1;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      return cmp;\r\n    }\r\n\r\n    function subtract(a, b, aL, base) {\r\n      var i = 0;\r\n\r\n      // Subtract b from a.\r\n      for (; aL--;) {\r\n        a[aL] -= i;\r\n        i = a[aL] < b[aL] ? 1 : 0;\r\n        a[aL] = i * base + a[aL] - b[aL];\r\n      }\r\n\r\n      // Remove leading zeros.\r\n      for (; !a[0] && a.length > 1; a.splice(0, 1));\r\n    }\r\n\r\n    // x: dividend, y: divisor.\r\n    return function (x, y, dp, rm, base) {\r\n      var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,\r\n        yL, yz,\r\n        s = x.s == y.s ? 1 : -1,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      // Either NaN, Infinity or 0?\r\n      if (!xc || !xc[0] || !yc || !yc[0]) {\r\n\r\n        return new BigNumber(\r\n\r\n         // Return NaN if either NaN, or both Infinity or 0.\r\n         !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN :\r\n\r\n          // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.\r\n          xc && xc[0] == 0 || !yc ? s * 0 : s / 0\r\n       );\r\n      }\r\n\r\n      q = new BigNumber(s);\r\n      qc = q.c = [];\r\n      e = x.e - y.e;\r\n      s = dp + e + 1;\r\n\r\n      if (!base) {\r\n        base = BASE;\r\n        e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);\r\n        s = s / LOG_BASE | 0;\r\n      }\r\n\r\n      // Result exponent may be one less then the current value of e.\r\n      // The coefficients of the BigNumbers from convertBase may have trailing zeros.\r\n      for (i = 0; yc[i] == (xc[i] || 0); i++);\r\n\r\n      if (yc[i] > (xc[i] || 0)) e--;\r\n\r\n      if (s < 0) {\r\n        qc.push(1);\r\n        more = true;\r\n      } else {\r\n        xL = xc.length;\r\n        yL = yc.length;\r\n        i = 0;\r\n        s += 2;\r\n\r\n        // Normalise xc and yc so highest order digit of yc is >= base / 2.\r\n\r\n        n = mathfloor(base / (yc[0] + 1));\r\n\r\n        // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.\r\n        // if (n > 1 || n++ == 1 && yc[0] < base / 2) {\r\n        if (n > 1) {\r\n          yc = multiply(yc, n, base);\r\n          xc = multiply(xc, n, base);\r\n          yL = yc.length;\r\n          xL = xc.length;\r\n        }\r\n\r\n        xi = yL;\r\n        rem = xc.slice(0, yL);\r\n        remL = rem.length;\r\n\r\n        // Add zeros to make remainder as long as divisor.\r\n        for (; remL < yL; rem[remL++] = 0);\r\n        yz = yc.slice();\r\n        yz = [0].concat(yz);\r\n        yc0 = yc[0];\r\n        if (yc[1] >= base / 2) yc0++;\r\n        // Not necessary, but to prevent trial digit n > base, when using base 3.\r\n        // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;\r\n\r\n        do {\r\n          n = 0;\r\n\r\n          // Compare divisor and remainder.\r\n          cmp = compare(yc, rem, yL, remL);\r\n\r\n          // If divisor < remainder.\r\n          if (cmp < 0) {\r\n\r\n            // Calculate trial digit, n.\r\n\r\n            rem0 = rem[0];\r\n            if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\r\n\r\n            // n is how many times the divisor goes into the current remainder.\r\n            n = mathfloor(rem0 / yc0);\r\n\r\n            //  Algorithm:\r\n            //  product = divisor multiplied by trial digit (n).\r\n            //  Compare product and remainder.\r\n            //  If product is greater than remainder:\r\n            //    Subtract divisor from product, decrement trial digit.\r\n            //  Subtract product from remainder.\r\n            //  If product was less than remainder at the last compare:\r\n            //    Compare new remainder and divisor.\r\n            //    If remainder is greater than divisor:\r\n            //      Subtract divisor from remainder, increment trial digit.\r\n\r\n            if (n > 1) {\r\n\r\n              // n may be > base only when base is 3.\r\n              if (n >= base) n = base - 1;\r\n\r\n              // product = divisor * trial digit.\r\n              prod = multiply(yc, n, base);\r\n              prodL = prod.length;\r\n              remL = rem.length;\r\n\r\n              // Compare product and remainder.\r\n              // If product > remainder then trial digit n too high.\r\n              // n is 1 too high about 5% of the time, and is not known to have\r\n              // ever been more than 1 too high.\r\n              while (compare(prod, rem, prodL, remL) == 1) {\r\n                n--;\r\n\r\n                // Subtract divisor from product.\r\n                subtract(prod, yL < prodL ? yz : yc, prodL, base);\r\n                prodL = prod.length;\r\n                cmp = 1;\r\n              }\r\n            } else {\r\n\r\n              // n is 0 or 1, cmp is -1.\r\n              // If n is 0, there is no need to compare yc and rem again below,\r\n              // so change cmp to 1 to avoid it.\r\n              // If n is 1, leave cmp as -1, so yc and rem are compared again.\r\n              if (n == 0) {\r\n\r\n                // divisor < remainder, so n must be at least 1.\r\n                cmp = n = 1;\r\n              }\r\n\r\n              // product = divisor\r\n              prod = yc.slice();\r\n              prodL = prod.length;\r\n            }\r\n\r\n            if (prodL < remL) prod = [0].concat(prod);\r\n\r\n            // Subtract product from remainder.\r\n            subtract(rem, prod, remL, base);\r\n            remL = rem.length;\r\n\r\n             // If product was < remainder.\r\n            if (cmp == -1) {\r\n\r\n              // Compare divisor and new remainder.\r\n              // If divisor < new remainder, subtract divisor from remainder.\r\n              // Trial digit n too low.\r\n              // n is 1 too low about 5% of the time, and very rarely 2 too low.\r\n              while (compare(yc, rem, yL, remL) < 1) {\r\n                n++;\r\n\r\n                // Subtract divisor from remainder.\r\n                subtract(rem, yL < remL ? yz : yc, remL, base);\r\n                remL = rem.length;\r\n              }\r\n            }\r\n          } else if (cmp === 0) {\r\n            n++;\r\n            rem = [0];\r\n          } // else cmp === 1 and n will be 0\r\n\r\n          // Add the next digit, n, to the result array.\r\n          qc[i++] = n;\r\n\r\n          // Update the remainder.\r\n          if (rem[0]) {\r\n            rem[remL++] = xc[xi] || 0;\r\n          } else {\r\n            rem = [xc[xi]];\r\n            remL = 1;\r\n          }\r\n        } while ((xi++ < xL || rem[0] != null) && s--);\r\n\r\n        more = rem[0] != null;\r\n\r\n        // Leading zero?\r\n        if (!qc[0]) qc.splice(0, 1);\r\n      }\r\n\r\n      if (base == BASE) {\r\n\r\n        // To calculate q.e, first get the number of digits of qc[0].\r\n        for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);\r\n\r\n        round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);\r\n\r\n      // Caller is convertBase.\r\n      } else {\r\n        q.e = e;\r\n        q.r = +more;\r\n      }\r\n\r\n      return q;\r\n    };\r\n  })();\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of BigNumber n in fixed-point or exponential\r\n   * notation rounded to the specified decimal places or significant digits.\r\n   *\r\n   * n: a BigNumber.\r\n   * i: the index of the last digit required (i.e. the digit that may be rounded up).\r\n   * rm: the rounding mode.\r\n   * id: 1 (toExponential) or 2 (toPrecision).\r\n   */\r\n  function format(n, i, rm, id) {\r\n    var c0, e, ne, len, str;\r\n\r\n    if (rm == null) rm = ROUNDING_MODE;\r\n    else intCheck(rm, 0, 8);\r\n\r\n    if (!n.c) return n.toString();\r\n\r\n    c0 = n.c[0];\r\n    ne = n.e;\r\n\r\n    if (i == null) {\r\n      str = coeffToString(n.c);\r\n      str = id == 1 || id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS)\r\n       ? toExponential(str, ne)\r\n       : toFixedPoint(str, ne, '0');\r\n    } else {\r\n      n = round(new BigNumber(n), i, rm);\r\n\r\n      // n.e may have changed if the value was rounded up.\r\n      e = n.e;\r\n\r\n      str = coeffToString(n.c);\r\n      len = str.length;\r\n\r\n      // toPrecision returns exponential notation if the number of significant digits\r\n      // specified is less than the number of digits necessary to represent the integer\r\n      // part of the value in fixed-point notation.\r\n\r\n      // Exponential notation.\r\n      if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {\r\n\r\n        // Append zeros?\r\n        for (; len < i; str += '0', len++);\r\n        str = toExponential(str, e);\r\n\r\n      // Fixed-point notation.\r\n      } else {\r\n        i -= ne;\r\n        str = toFixedPoint(str, e, '0');\r\n\r\n        // Append zeros?\r\n        if (e + 1 > len) {\r\n          if (--i > 0) for (str += '.'; i--; str += '0');\r\n        } else {\r\n          i += e - len;\r\n          if (i > 0) {\r\n            if (e + 1 == len) str += '.';\r\n            for (; i--; str += '0');\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return n.s < 0 && c0 ? '-' + str : str;\r\n  }\r\n\r\n\r\n  // Handle BigNumber.max and BigNumber.min.\r\n  function maxOrMin(args, method) {\r\n    var n,\r\n      i = 1,\r\n      m = new BigNumber(args[0]);\r\n\r\n    for (; i < args.length; i++) {\r\n      n = new BigNumber(args[i]);\r\n\r\n      // If any number is NaN, return NaN.\r\n      if (!n.s) {\r\n        m = n;\r\n        break;\r\n      } else if (method.call(m, n)) {\r\n        m = n;\r\n      }\r\n    }\r\n\r\n    return m;\r\n  }\r\n\r\n\r\n  /*\r\n   * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.\r\n   * Called by minus, plus and times.\r\n   */\r\n  function normalise(n, c, e) {\r\n    var i = 1,\r\n      j = c.length;\r\n\r\n     // Remove trailing zeros.\r\n    for (; !c[--j]; c.pop());\r\n\r\n    // Calculate the base 10 exponent. First get the number of digits of c[0].\r\n    for (j = c[0]; j >= 10; j /= 10, i++);\r\n\r\n    // Overflow?\r\n    if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {\r\n\r\n      // Infinity.\r\n      n.c = n.e = null;\r\n\r\n    // Underflow?\r\n    } else if (e < MIN_EXP) {\r\n\r\n      // Zero.\r\n      n.c = [n.e = 0];\r\n    } else {\r\n      n.e = e;\r\n      n.c = c;\r\n    }\r\n\r\n    return n;\r\n  }\r\n\r\n\r\n  // Handle values that fail the validity test in BigNumber.\r\n  parseNumeric = (function () {\r\n    var basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i,\r\n      dotAfter = /^([^.]+)\\.$/,\r\n      dotBefore = /^\\.([^.]+)$/,\r\n      isInfinityOrNaN = /^-?(Infinity|NaN)$/,\r\n      whitespaceOrPlus = /^\\s*\\+(?=[\\w.])|^\\s+|\\s+$/g;\r\n\r\n    return function (x, str, isNum, b) {\r\n      var base,\r\n        s = isNum ? str : str.replace(whitespaceOrPlus, '');\r\n\r\n      // No exception on ±Infinity or NaN.\r\n      if (isInfinityOrNaN.test(s)) {\r\n        x.s = isNaN(s) ? null : s < 0 ? -1 : 1;\r\n      } else {\r\n        if (!isNum) {\r\n\r\n          // basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i\r\n          s = s.replace(basePrefix, function (m, p1, p2) {\r\n            base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;\r\n            return !b || b == base ? p1 : m;\r\n          });\r\n\r\n          if (b) {\r\n            base = b;\r\n\r\n            // E.g. '1.' to '1', '.1' to '0.1'\r\n            s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');\r\n          }\r\n\r\n          if (str != s) return new BigNumber(s, base);\r\n        }\r\n\r\n        // '[BigNumber Error] Not a number: {n}'\r\n        // '[BigNumber Error] Not a base {b} number: {n}'\r\n        if (BigNumber.DEBUG) {\r\n          throw Error\r\n            (bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);\r\n        }\r\n\r\n        // NaN\r\n        x.s = null;\r\n      }\r\n\r\n      x.c = x.e = null;\r\n    }\r\n  })();\r\n\r\n\r\n  /*\r\n   * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.\r\n   * If r is truthy, it is known that there are more digits after the rounding digit.\r\n   */\r\n  function round(x, sd, rm, r) {\r\n    var d, i, j, k, n, ni, rd,\r\n      xc = x.c,\r\n      pows10 = POWS_TEN;\r\n\r\n    // if x is not Infinity or NaN...\r\n    if (xc) {\r\n\r\n      // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n      // n is a base 1e14 number, the value of the element of array x.c containing rd.\r\n      // ni is the index of n within x.c.\r\n      // d is the number of digits of n.\r\n      // i is the index of rd within n including leading zeros.\r\n      // j is the actual index of rd within n (if < 0, rd is a leading zero).\r\n      out: {\r\n\r\n        // Get the number of digits of the first element of xc.\r\n        for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);\r\n        i = sd - d;\r\n\r\n        // If the rounding digit is in the first element of xc...\r\n        if (i < 0) {\r\n          i += LOG_BASE;\r\n          j = sd;\r\n          n = xc[ni = 0];\r\n\r\n          // Get the rounding digit at index j of n.\r\n          rd = n / pows10[d - j - 1] % 10 | 0;\r\n        } else {\r\n          ni = mathceil((i + 1) / LOG_BASE);\r\n\r\n          if (ni >= xc.length) {\r\n\r\n            if (r) {\r\n\r\n              // Needed by sqrt.\r\n              for (; xc.length <= ni; xc.push(0));\r\n              n = rd = 0;\r\n              d = 1;\r\n              i %= LOG_BASE;\r\n              j = i - LOG_BASE + 1;\r\n            } else {\r\n              break out;\r\n            }\r\n          } else {\r\n            n = k = xc[ni];\r\n\r\n            // Get the number of digits of n.\r\n            for (d = 1; k >= 10; k /= 10, d++);\r\n\r\n            // Get the index of rd within n.\r\n            i %= LOG_BASE;\r\n\r\n            // Get the index of rd within n, adjusted for leading zeros.\r\n            // The number of leading zeros of n is given by LOG_BASE - d.\r\n            j = i - LOG_BASE + d;\r\n\r\n            // Get the rounding digit at index j of n.\r\n            rd = j < 0 ? 0 : n / pows10[d - j - 1] % 10 | 0;\r\n          }\r\n        }\r\n\r\n        r = r || sd < 0 ||\r\n\r\n        // Are there any non-zero digits after the rounding digit?\r\n        // The expression  n % pows10[d - j - 1]  returns all digits of n to the right\r\n        // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.\r\n         xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);\r\n\r\n        r = rm < 4\r\n         ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n         : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 &&\r\n\r\n          // Check whether the digit to the left of the rounding digit is odd.\r\n          ((i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10) & 1 ||\r\n           rm == (x.s < 0 ? 8 : 7));\r\n\r\n        if (sd < 1 || !xc[0]) {\r\n          xc.length = 0;\r\n\r\n          if (r) {\r\n\r\n            // Convert sd to decimal places.\r\n            sd -= x.e + 1;\r\n\r\n            // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n            xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];\r\n            x.e = -sd || 0;\r\n          } else {\r\n\r\n            // Zero.\r\n            xc[0] = x.e = 0;\r\n          }\r\n\r\n          return x;\r\n        }\r\n\r\n        // Remove excess digits.\r\n        if (i == 0) {\r\n          xc.length = ni;\r\n          k = 1;\r\n          ni--;\r\n        } else {\r\n          xc.length = ni + 1;\r\n          k = pows10[LOG_BASE - i];\r\n\r\n          // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n          // j > 0 means i > number of leading zeros of n.\r\n          xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;\r\n        }\r\n\r\n        // Round up?\r\n        if (r) {\r\n\r\n          for (; ;) {\r\n\r\n            // If the digit to be rounded up is in the first element of xc...\r\n            if (ni == 0) {\r\n\r\n              // i will be the length of xc[0] before k is added.\r\n              for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);\r\n              j = xc[0] += k;\r\n              for (k = 1; j >= 10; j /= 10, k++);\r\n\r\n              // if i != k the length has increased.\r\n              if (i != k) {\r\n                x.e++;\r\n                if (xc[0] == BASE) xc[0] = 1;\r\n              }\r\n\r\n              break;\r\n            } else {\r\n              xc[ni] += k;\r\n              if (xc[ni] != BASE) break;\r\n              xc[ni--] = 0;\r\n              k = 1;\r\n            }\r\n          }\r\n        }\r\n\r\n        // Remove trailing zeros.\r\n        for (i = xc.length; xc[--i] === 0; xc.pop());\r\n      }\r\n\r\n      // Overflow? Infinity.\r\n      if (x.e > MAX_EXP) {\r\n        x.c = x.e = null;\r\n\r\n      // Underflow? Zero.\r\n      } else if (x.e < MIN_EXP) {\r\n        x.c = [x.e = 0];\r\n      }\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  function valueOf(n) {\r\n    var str,\r\n      e = n.e;\r\n\r\n    if (e === null) return n.toString();\r\n\r\n    str = coeffToString(n.c);\r\n\r\n    str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n      ? toExponential(str, e)\r\n      : toFixedPoint(str, e, '0');\r\n\r\n    return n.s < 0 ? '-' + str : str;\r\n  }\r\n\r\n\r\n  // PROTOTYPE/INSTANCE METHODS\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the absolute value of this BigNumber.\r\n   */\r\n  P.absoluteValue = P.abs = function () {\r\n    var x = new BigNumber(this);\r\n    if (x.s < 0) x.s = 1;\r\n    return x;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return\r\n   *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n   *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n   *   0 if they have the same value,\r\n   *   or null if the value of either is NaN.\r\n   */\r\n  P.comparedTo = function (y, b) {\r\n    return compare(this, new BigNumber(y, b));\r\n  };\r\n\r\n\r\n  /*\r\n   * If dp is undefined or null or true or false, return the number of decimal places of the\r\n   * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n   *\r\n   * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this\r\n   * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or\r\n   * ROUNDING_MODE if rm is omitted.\r\n   *\r\n   * [dp] {number} Decimal places: integer, 0 to MAX inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n   */\r\n  P.decimalPlaces = P.dp = function (dp, rm) {\r\n    var c, n, v,\r\n      x = this;\r\n\r\n    if (dp != null) {\r\n      intCheck(dp, 0, MAX);\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n\r\n      return round(new BigNumber(x), dp + x.e + 1, rm);\r\n    }\r\n\r\n    if (!(c = x.c)) return null;\r\n    n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;\r\n\r\n    // Subtract the number of trailing zeros of the last number.\r\n    if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);\r\n    if (n < 0) n = 0;\r\n\r\n    return n;\r\n  };\r\n\r\n\r\n  /*\r\n   *  n / 0 = I\r\n   *  n / N = N\r\n   *  n / I = 0\r\n   *  0 / n = 0\r\n   *  0 / 0 = N\r\n   *  0 / N = N\r\n   *  0 / I = 0\r\n   *  N / n = N\r\n   *  N / 0 = N\r\n   *  N / N = N\r\n   *  N / I = N\r\n   *  I / n = I\r\n   *  I / 0 = I\r\n   *  I / N = N\r\n   *  I / I = N\r\n   *\r\n   * Return a new BigNumber whose value is the value of this BigNumber divided by the value of\r\n   * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n   */\r\n  P.dividedBy = P.div = function (y, b) {\r\n    return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the integer part of dividing the value of this\r\n   * BigNumber by the value of BigNumber(y, b).\r\n   */\r\n  P.dividedToIntegerBy = P.idiv = function (y, b) {\r\n    return div(this, new BigNumber(y, b), 0, 1);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.\r\n   *\r\n   * If m is present, return the result modulo m.\r\n   * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.\r\n   * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.\r\n   *\r\n   * The modular power operation works efficiently when x, n, and m are integers, otherwise it\r\n   * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.\r\n   *\r\n   * n {number|string|BigNumber} The exponent. An integer.\r\n   * [m] {number|string|BigNumber} The modulus.\r\n   *\r\n   * '[BigNumber Error] Exponent not an integer: {n}'\r\n   */\r\n  P.exponentiatedBy = P.pow = function (n, m) {\r\n    var half, isModExp, i, k, more, nIsBig, nIsNeg, nIsOdd, y,\r\n      x = this;\r\n\r\n    n = new BigNumber(n);\r\n\r\n    // Allow NaN and ±Infinity, but not other non-integers.\r\n    if (n.c && !n.isInteger()) {\r\n      throw Error\r\n        (bignumberError + 'Exponent not an integer: ' + valueOf(n));\r\n    }\r\n\r\n    if (m != null) m = new BigNumber(m);\r\n\r\n    // Exponent of MAX_SAFE_INTEGER is 15.\r\n    nIsBig = n.e > 14;\r\n\r\n    // If x is NaN, ±Infinity, ±0 or ±1, or n is ±Infinity, NaN or ±0.\r\n    if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {\r\n\r\n      // The sign of the result of pow when x is negative depends on the evenness of n.\r\n      // If +n overflows to ±Infinity, the evenness of n would be not be known.\r\n      y = new BigNumber(Math.pow(+valueOf(x), nIsBig ? 2 - isOdd(n) : +valueOf(n)));\r\n      return m ? y.mod(m) : y;\r\n    }\r\n\r\n    nIsNeg = n.s < 0;\r\n\r\n    if (m) {\r\n\r\n      // x % m returns NaN if abs(m) is zero, or m is NaN.\r\n      if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);\r\n\r\n      isModExp = !nIsNeg && x.isInteger() && m.isInteger();\r\n\r\n      if (isModExp) x = x.mod(m);\r\n\r\n    // Overflow to ±Infinity: >=2**1e10 or >=1.0000024**1e15.\r\n    // Underflow to ±0: <=0.79**1e10 or <=0.9999975**1e15.\r\n    } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0\r\n      // [1, 240000000]\r\n      ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7\r\n      // [80000000000000]  [99999750000000]\r\n      : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {\r\n\r\n      // If x is negative and n is odd, k = -0, else k = 0.\r\n      k = x.s < 0 && isOdd(n) ? -0 : 0;\r\n\r\n      // If x >= 1, k = ±Infinity.\r\n      if (x.e > -1) k = 1 / k;\r\n\r\n      // If n is negative return ±0, else return ±Infinity.\r\n      return new BigNumber(nIsNeg ? 1 / k : k);\r\n\r\n    } else if (POW_PRECISION) {\r\n\r\n      // Truncating each coefficient array to a length of k after each multiplication\r\n      // equates to truncating significant digits to POW_PRECISION + [28, 41],\r\n      // i.e. there will be a minimum of 28 guard digits retained.\r\n      k = mathceil(POW_PRECISION / LOG_BASE + 2);\r\n    }\r\n\r\n    if (nIsBig) {\r\n      half = new BigNumber(0.5);\r\n      if (nIsNeg) n.s = 1;\r\n      nIsOdd = isOdd(n);\r\n    } else {\r\n      i = Math.abs(+valueOf(n));\r\n      nIsOdd = i % 2;\r\n    }\r\n\r\n    y = new BigNumber(ONE);\r\n\r\n    // Performs 54 loop iterations for n of 9007199254740991.\r\n    for (; ;) {\r\n\r\n      if (nIsOdd) {\r\n        y = y.times(x);\r\n        if (!y.c) break;\r\n\r\n        if (k) {\r\n          if (y.c.length > k) y.c.length = k;\r\n        } else if (isModExp) {\r\n          y = y.mod(m);    //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));\r\n        }\r\n      }\r\n\r\n      if (i) {\r\n        i = mathfloor(i / 2);\r\n        if (i === 0) break;\r\n        nIsOdd = i % 2;\r\n      } else {\r\n        n = n.times(half);\r\n        round(n, n.e + 1, 1);\r\n\r\n        if (n.e > 14) {\r\n          nIsOdd = isOdd(n);\r\n        } else {\r\n          i = +valueOf(n);\r\n          if (i === 0) break;\r\n          nIsOdd = i % 2;\r\n        }\r\n      }\r\n\r\n      x = x.times(x);\r\n\r\n      if (k) {\r\n        if (x.c && x.c.length > k) x.c.length = k;\r\n      } else if (isModExp) {\r\n        x = x.mod(m);    //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));\r\n      }\r\n    }\r\n\r\n    if (isModExp) return y;\r\n    if (nIsNeg) y = ONE.div(y);\r\n\r\n    return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer\r\n   * using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n   *\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'\r\n   */\r\n  P.integerValue = function (rm) {\r\n    var n = new BigNumber(this);\r\n    if (rm == null) rm = ROUNDING_MODE;\r\n    else intCheck(rm, 0, 8);\r\n    return round(n, n.e + 1, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),\r\n   * otherwise return false.\r\n   */\r\n  P.isEqualTo = P.eq = function (y, b) {\r\n    return compare(this, new BigNumber(y, b)) === 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is a finite number, otherwise return false.\r\n   */\r\n  P.isFinite = function () {\r\n    return !!this.c;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n   * otherwise return false.\r\n   */\r\n  P.isGreaterThan = P.gt = function (y, b) {\r\n    return compare(this, new BigNumber(y, b)) > 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is greater than or equal to the value of\r\n   * BigNumber(y, b), otherwise return false.\r\n   */\r\n  P.isGreaterThanOrEqualTo = P.gte = function (y, b) {\r\n    return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;\r\n\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is an integer, otherwise return false.\r\n   */\r\n  P.isInteger = function () {\r\n    return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n   * otherwise return false.\r\n   */\r\n  P.isLessThan = P.lt = function (y, b) {\r\n    return compare(this, new BigNumber(y, b)) < 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is less than or equal to the value of\r\n   * BigNumber(y, b), otherwise return false.\r\n   */\r\n  P.isLessThanOrEqualTo = P.lte = function (y, b) {\r\n    return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is NaN, otherwise return false.\r\n   */\r\n  P.isNaN = function () {\r\n    return !this.s;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is negative, otherwise return false.\r\n   */\r\n  P.isNegative = function () {\r\n    return this.s < 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is positive, otherwise return false.\r\n   */\r\n  P.isPositive = function () {\r\n    return this.s > 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is 0 or -0, otherwise return false.\r\n   */\r\n  P.isZero = function () {\r\n    return !!this.c && this.c[0] == 0;\r\n  };\r\n\r\n\r\n  /*\r\n   *  n - 0 = n\r\n   *  n - N = N\r\n   *  n - I = -I\r\n   *  0 - n = -n\r\n   *  0 - 0 = 0\r\n   *  0 - N = N\r\n   *  0 - I = -I\r\n   *  N - n = N\r\n   *  N - 0 = N\r\n   *  N - N = N\r\n   *  N - I = N\r\n   *  I - n = I\r\n   *  I - 0 = I\r\n   *  I - N = N\r\n   *  I - I = N\r\n   *\r\n   * Return a new BigNumber whose value is the value of this BigNumber minus the value of\r\n   * BigNumber(y, b).\r\n   */\r\n  P.minus = function (y, b) {\r\n    var i, j, t, xLTy,\r\n      x = this,\r\n      a = x.s;\r\n\r\n    y = new BigNumber(y, b);\r\n    b = y.s;\r\n\r\n    // Either NaN?\r\n    if (!a || !b) return new BigNumber(NaN);\r\n\r\n    // Signs differ?\r\n    if (a != b) {\r\n      y.s = -b;\r\n      return x.plus(y);\r\n    }\r\n\r\n    var xe = x.e / LOG_BASE,\r\n      ye = y.e / LOG_BASE,\r\n      xc = x.c,\r\n      yc = y.c;\r\n\r\n    if (!xe || !ye) {\r\n\r\n      // Either Infinity?\r\n      if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);\r\n\r\n      // Either zero?\r\n      if (!xc[0] || !yc[0]) {\r\n\r\n        // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n        return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x :\r\n\r\n         // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity\r\n         ROUNDING_MODE == 3 ? -0 : 0);\r\n      }\r\n    }\r\n\r\n    xe = bitFloor(xe);\r\n    ye = bitFloor(ye);\r\n    xc = xc.slice();\r\n\r\n    // Determine which is the bigger number.\r\n    if (a = xe - ye) {\r\n\r\n      if (xLTy = a < 0) {\r\n        a = -a;\r\n        t = xc;\r\n      } else {\r\n        ye = xe;\r\n        t = yc;\r\n      }\r\n\r\n      t.reverse();\r\n\r\n      // Prepend zeros to equalise exponents.\r\n      for (b = a; b--; t.push(0));\r\n      t.reverse();\r\n    } else {\r\n\r\n      // Exponents equal. Check digit by digit.\r\n      j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;\r\n\r\n      for (a = b = 0; b < j; b++) {\r\n\r\n        if (xc[b] != yc[b]) {\r\n          xLTy = xc[b] < yc[b];\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    // x < y? Point xc to the array of the bigger number.\r\n    if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;\r\n\r\n    b = (j = yc.length) - (i = xc.length);\r\n\r\n    // Append zeros to xc if shorter.\r\n    // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.\r\n    if (b > 0) for (; b--; xc[i++] = 0);\r\n    b = BASE - 1;\r\n\r\n    // Subtract yc from xc.\r\n    for (; j > a;) {\r\n\r\n      if (xc[--j] < yc[j]) {\r\n        for (i = j; i && !xc[--i]; xc[i] = b);\r\n        --xc[i];\r\n        xc[j] += BASE;\r\n      }\r\n\r\n      xc[j] -= yc[j];\r\n    }\r\n\r\n    // Remove leading zeros and adjust exponent accordingly.\r\n    for (; xc[0] == 0; xc.splice(0, 1), --ye);\r\n\r\n    // Zero?\r\n    if (!xc[0]) {\r\n\r\n      // Following IEEE 754 (2008) 6.3,\r\n      // n - n = +0  but  n - n = -0  when rounding towards -Infinity.\r\n      y.s = ROUNDING_MODE == 3 ? -1 : 1;\r\n      y.c = [y.e = 0];\r\n      return y;\r\n    }\r\n\r\n    // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity\r\n    // for finite x and y.\r\n    return normalise(y, xc, ye);\r\n  };\r\n\r\n\r\n  /*\r\n   *   n % 0 =  N\r\n   *   n % N =  N\r\n   *   n % I =  n\r\n   *   0 % n =  0\r\n   *  -0 % n = -0\r\n   *   0 % 0 =  N\r\n   *   0 % N =  N\r\n   *   0 % I =  0\r\n   *   N % n =  N\r\n   *   N % 0 =  N\r\n   *   N % N =  N\r\n   *   N % I =  N\r\n   *   I % n =  N\r\n   *   I % 0 =  N\r\n   *   I % N =  N\r\n   *   I % I =  N\r\n   *\r\n   * Return a new BigNumber whose value is the value of this BigNumber modulo the value of\r\n   * BigNumber(y, b). The result depends on the value of MODULO_MODE.\r\n   */\r\n  P.modulo = P.mod = function (y, b) {\r\n    var q, s,\r\n      x = this;\r\n\r\n    y = new BigNumber(y, b);\r\n\r\n    // Return NaN if x is Infinity or NaN, or y is NaN or zero.\r\n    if (!x.c || !y.s || y.c && !y.c[0]) {\r\n      return new BigNumber(NaN);\r\n\r\n    // Return x if y is Infinity or x is zero.\r\n    } else if (!y.c || x.c && !x.c[0]) {\r\n      return new BigNumber(x);\r\n    }\r\n\r\n    if (MODULO_MODE == 9) {\r\n\r\n      // Euclidian division: q = sign(y) * floor(x / abs(y))\r\n      // r = x - qy    where  0 <= r < abs(y)\r\n      s = y.s;\r\n      y.s = 1;\r\n      q = div(x, y, 0, 3);\r\n      y.s = s;\r\n      q.s *= s;\r\n    } else {\r\n      q = div(x, y, 0, MODULO_MODE);\r\n    }\r\n\r\n    y = x.minus(q.times(y));\r\n\r\n    // To match JavaScript %, ensure sign of zero is sign of dividend.\r\n    if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;\r\n\r\n    return y;\r\n  };\r\n\r\n\r\n  /*\r\n   *  n * 0 = 0\r\n   *  n * N = N\r\n   *  n * I = I\r\n   *  0 * n = 0\r\n   *  0 * 0 = 0\r\n   *  0 * N = N\r\n   *  0 * I = N\r\n   *  N * n = N\r\n   *  N * 0 = N\r\n   *  N * N = N\r\n   *  N * I = N\r\n   *  I * n = I\r\n   *  I * 0 = N\r\n   *  I * N = N\r\n   *  I * I = I\r\n   *\r\n   * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value\r\n   * of BigNumber(y, b).\r\n   */\r\n  P.multipliedBy = P.times = function (y, b) {\r\n    var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,\r\n      base, sqrtBase,\r\n      x = this,\r\n      xc = x.c,\r\n      yc = (y = new BigNumber(y, b)).c;\r\n\r\n    // Either NaN, ±Infinity or ±0?\r\n    if (!xc || !yc || !xc[0] || !yc[0]) {\r\n\r\n      // Return NaN if either is NaN, or one is 0 and the other is Infinity.\r\n      if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {\r\n        y.c = y.e = y.s = null;\r\n      } else {\r\n        y.s *= x.s;\r\n\r\n        // Return ±Infinity if either is ±Infinity.\r\n        if (!xc || !yc) {\r\n          y.c = y.e = null;\r\n\r\n        // Return ±0 if either is ±0.\r\n        } else {\r\n          y.c = [0];\r\n          y.e = 0;\r\n        }\r\n      }\r\n\r\n      return y;\r\n    }\r\n\r\n    e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);\r\n    y.s *= x.s;\r\n    xcL = xc.length;\r\n    ycL = yc.length;\r\n\r\n    // Ensure xc points to longer array and xcL to its length.\r\n    if (xcL < ycL) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i;\r\n\r\n    // Initialise the result array with zeros.\r\n    for (i = xcL + ycL, zc = []; i--; zc.push(0));\r\n\r\n    base = BASE;\r\n    sqrtBase = SQRT_BASE;\r\n\r\n    for (i = ycL; --i >= 0;) {\r\n      c = 0;\r\n      ylo = yc[i] % sqrtBase;\r\n      yhi = yc[i] / sqrtBase | 0;\r\n\r\n      for (k = xcL, j = i + k; j > i;) {\r\n        xlo = xc[--k] % sqrtBase;\r\n        xhi = xc[k] / sqrtBase | 0;\r\n        m = yhi * xlo + xhi * ylo;\r\n        xlo = ylo * xlo + ((m % sqrtBase) * sqrtBase) + zc[j] + c;\r\n        c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;\r\n        zc[j--] = xlo % base;\r\n      }\r\n\r\n      zc[j] = c;\r\n    }\r\n\r\n    if (c) {\r\n      ++e;\r\n    } else {\r\n      zc.splice(0, 1);\r\n    }\r\n\r\n    return normalise(y, zc, e);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the value of this BigNumber negated,\r\n   * i.e. multiplied by -1.\r\n   */\r\n  P.negated = function () {\r\n    var x = new BigNumber(this);\r\n    x.s = -x.s || null;\r\n    return x;\r\n  };\r\n\r\n\r\n  /*\r\n   *  n + 0 = n\r\n   *  n + N = N\r\n   *  n + I = I\r\n   *  0 + n = n\r\n   *  0 + 0 = 0\r\n   *  0 + N = N\r\n   *  0 + I = I\r\n   *  N + n = N\r\n   *  N + 0 = N\r\n   *  N + N = N\r\n   *  N + I = N\r\n   *  I + n = I\r\n   *  I + 0 = I\r\n   *  I + N = N\r\n   *  I + I = I\r\n   *\r\n   * Return a new BigNumber whose value is the value of this BigNumber plus the value of\r\n   * BigNumber(y, b).\r\n   */\r\n  P.plus = function (y, b) {\r\n    var t,\r\n      x = this,\r\n      a = x.s;\r\n\r\n    y = new BigNumber(y, b);\r\n    b = y.s;\r\n\r\n    // Either NaN?\r\n    if (!a || !b) return new BigNumber(NaN);\r\n\r\n    // Signs differ?\r\n     if (a != b) {\r\n      y.s = -b;\r\n      return x.minus(y);\r\n    }\r\n\r\n    var xe = x.e / LOG_BASE,\r\n      ye = y.e / LOG_BASE,\r\n      xc = x.c,\r\n      yc = y.c;\r\n\r\n    if (!xe || !ye) {\r\n\r\n      // Return ±Infinity if either ±Infinity.\r\n      if (!xc || !yc) return new BigNumber(a / 0);\r\n\r\n      // Either zero?\r\n      // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n      if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);\r\n    }\r\n\r\n    xe = bitFloor(xe);\r\n    ye = bitFloor(ye);\r\n    xc = xc.slice();\r\n\r\n    // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.\r\n    if (a = xe - ye) {\r\n      if (a > 0) {\r\n        ye = xe;\r\n        t = yc;\r\n      } else {\r\n        a = -a;\r\n        t = xc;\r\n      }\r\n\r\n      t.reverse();\r\n      for (; a--; t.push(0));\r\n      t.reverse();\r\n    }\r\n\r\n    a = xc.length;\r\n    b = yc.length;\r\n\r\n    // Point xc to the longer array, and b to the shorter length.\r\n    if (a - b < 0) t = yc, yc = xc, xc = t, b = a;\r\n\r\n    // Only start adding at yc.length - 1 as the further digits of xc can be ignored.\r\n    for (a = 0; b;) {\r\n      a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;\r\n      xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;\r\n    }\r\n\r\n    if (a) {\r\n      xc = [a].concat(xc);\r\n      ++ye;\r\n    }\r\n\r\n    // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n    // ye = MAX_EXP + 1 possible\r\n    return normalise(y, xc, ye);\r\n  };\r\n\r\n\r\n  /*\r\n   * If sd is undefined or null or true or false, return the number of significant digits of\r\n   * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n   * If sd is true include integer-part trailing zeros in the count.\r\n   *\r\n   * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this\r\n   * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or\r\n   * ROUNDING_MODE if rm is omitted.\r\n   *\r\n   * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.\r\n   *                     boolean: whether to count integer-part trailing zeros: true or false.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n   */\r\n  P.precision = P.sd = function (sd, rm) {\r\n    var c, n, v,\r\n      x = this;\r\n\r\n    if (sd != null && sd !== !!sd) {\r\n      intCheck(sd, 1, MAX);\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n\r\n      return round(new BigNumber(x), sd, rm);\r\n    }\r\n\r\n    if (!(c = x.c)) return null;\r\n    v = c.length - 1;\r\n    n = v * LOG_BASE + 1;\r\n\r\n    if (v = c[v]) {\r\n\r\n      // Subtract the number of trailing zeros of the last element.\r\n      for (; v % 10 == 0; v /= 10, n--);\r\n\r\n      // Add the number of digits of the first element.\r\n      for (v = c[0]; v >= 10; v /= 10, n++);\r\n    }\r\n\r\n    if (sd && x.e + 1 > n) n = x.e + 1;\r\n\r\n    return n;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the value of this BigNumber shifted by k places\r\n   * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.\r\n   *\r\n   * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'\r\n   */\r\n  P.shiftedBy = function (k) {\r\n    intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);\r\n    return this.times('1e' + k);\r\n  };\r\n\r\n\r\n  /*\r\n   *  sqrt(-n) =  N\r\n   *  sqrt(N) =  N\r\n   *  sqrt(-I) =  N\r\n   *  sqrt(I) =  I\r\n   *  sqrt(0) =  0\r\n   *  sqrt(-0) = -0\r\n   *\r\n   * Return a new BigNumber whose value is the square root of the value of this BigNumber,\r\n   * rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n   */\r\n  P.squareRoot = P.sqrt = function () {\r\n    var m, n, r, rep, t,\r\n      x = this,\r\n      c = x.c,\r\n      s = x.s,\r\n      e = x.e,\r\n      dp = DECIMAL_PLACES + 4,\r\n      half = new BigNumber('0.5');\r\n\r\n    // Negative/NaN/Infinity/zero?\r\n    if (s !== 1 || !c || !c[0]) {\r\n      return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);\r\n    }\r\n\r\n    // Initial estimate.\r\n    s = Math.sqrt(+valueOf(x));\r\n\r\n    // Math.sqrt underflow/overflow?\r\n    // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n    if (s == 0 || s == 1 / 0) {\r\n      n = coeffToString(c);\r\n      if ((n.length + e) % 2 == 0) n += '0';\r\n      s = Math.sqrt(+n);\r\n      e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);\r\n\r\n      if (s == 1 / 0) {\r\n        n = '5e' + e;\r\n      } else {\r\n        n = s.toExponential();\r\n        n = n.slice(0, n.indexOf('e') + 1) + e;\r\n      }\r\n\r\n      r = new BigNumber(n);\r\n    } else {\r\n      r = new BigNumber(s + '');\r\n    }\r\n\r\n    // Check for zero.\r\n    // r could be zero if MIN_EXP is changed after the this value was created.\r\n    // This would cause a division by zero (x/t) and hence Infinity below, which would cause\r\n    // coeffToString to throw.\r\n    if (r.c[0]) {\r\n      e = r.e;\r\n      s = e + dp;\r\n      if (s < 3) s = 0;\r\n\r\n      // Newton-Raphson iteration.\r\n      for (; ;) {\r\n        t = r;\r\n        r = half.times(t.plus(div(x, t, dp, 1)));\r\n\r\n        if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {\r\n\r\n          // The exponent of r may here be one less than the final result exponent,\r\n          // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits\r\n          // are indexed correctly.\r\n          if (r.e < e) --s;\r\n          n = n.slice(s - 3, s + 1);\r\n\r\n          // The 4th rounding digit may be in error by -1 so if the 4 rounding digits\r\n          // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the\r\n          // iteration.\r\n          if (n == '9999' || !rep && n == '4999') {\r\n\r\n            // On the first iteration only, check to see if rounding up gives the\r\n            // exact result as the nines may infinitely repeat.\r\n            if (!rep) {\r\n              round(t, t.e + DECIMAL_PLACES + 2, 0);\r\n\r\n              if (t.times(t).eq(x)) {\r\n                r = t;\r\n                break;\r\n              }\r\n            }\r\n\r\n            dp += 4;\r\n            s += 4;\r\n            rep = 1;\r\n          } else {\r\n\r\n            // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact\r\n            // result. If not, then there are further digits and m will be truthy.\r\n            if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n              // Truncate to the first rounding digit.\r\n              round(r, r.e + DECIMAL_PLACES + 2, 1);\r\n              m = !r.times(r).eq(x);\r\n            }\r\n\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this BigNumber in exponential notation and\r\n   * rounded using ROUNDING_MODE to dp fixed decimal places.\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n   */\r\n  P.toExponential = function (dp, rm) {\r\n    if (dp != null) {\r\n      intCheck(dp, 0, MAX);\r\n      dp++;\r\n    }\r\n    return format(this, dp, rm, 1);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this BigNumber in fixed-point notation rounding\r\n   * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n   *\r\n   * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',\r\n   * but e.g. (-0.00001).toFixed(0) is '-0'.\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n   */\r\n  P.toFixed = function (dp, rm) {\r\n    if (dp != null) {\r\n      intCheck(dp, 0, MAX);\r\n      dp = dp + this.e + 1;\r\n    }\r\n    return format(this, dp, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this BigNumber in fixed-point notation rounded\r\n   * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties\r\n   * of the format or FORMAT object (see BigNumber.set).\r\n   *\r\n   * The formatting object may contain some or all of the properties shown below.\r\n   *\r\n   * FORMAT = {\r\n   *   prefix: '',\r\n   *   groupSize: 3,\r\n   *   secondaryGroupSize: 0,\r\n   *   groupSeparator: ',',\r\n   *   decimalSeparator: '.',\r\n   *   fractionGroupSize: 0,\r\n   *   fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n   *   suffix: ''\r\n   * };\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   * [format] {object} Formatting options. See FORMAT pbject above.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n   * '[BigNumber Error] Argument not an object: {format}'\r\n   */\r\n  P.toFormat = function (dp, rm, format) {\r\n    var str,\r\n      x = this;\r\n\r\n    if (format == null) {\r\n      if (dp != null && rm && typeof rm == 'object') {\r\n        format = rm;\r\n        rm = null;\r\n      } else if (dp && typeof dp == 'object') {\r\n        format = dp;\r\n        dp = rm = null;\r\n      } else {\r\n        format = FORMAT;\r\n      }\r\n    } else if (typeof format != 'object') {\r\n      throw Error\r\n        (bignumberError + 'Argument not an object: ' + format);\r\n    }\r\n\r\n    str = x.toFixed(dp, rm);\r\n\r\n    if (x.c) {\r\n      var i,\r\n        arr = str.split('.'),\r\n        g1 = +format.groupSize,\r\n        g2 = +format.secondaryGroupSize,\r\n        groupSeparator = format.groupSeparator || '',\r\n        intPart = arr[0],\r\n        fractionPart = arr[1],\r\n        isNeg = x.s < 0,\r\n        intDigits = isNeg ? intPart.slice(1) : intPart,\r\n        len = intDigits.length;\r\n\r\n      if (g2) i = g1, g1 = g2, g2 = i, len -= i;\r\n\r\n      if (g1 > 0 && len > 0) {\r\n        i = len % g1 || g1;\r\n        intPart = intDigits.substr(0, i);\r\n        for (; i < len; i += g1) intPart += groupSeparator + intDigits.substr(i, g1);\r\n        if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);\r\n        if (isNeg) intPart = '-' + intPart;\r\n      }\r\n\r\n      str = fractionPart\r\n       ? intPart + (format.decimalSeparator || '') + ((g2 = +format.fractionGroupSize)\r\n        ? fractionPart.replace(new RegExp('\\\\d{' + g2 + '}\\\\B', 'g'),\r\n         '$&' + (format.fractionGroupSeparator || ''))\r\n        : fractionPart)\r\n       : intPart;\r\n    }\r\n\r\n    return (format.prefix || '') + str + (format.suffix || '');\r\n  };\r\n\r\n\r\n  /*\r\n   * Return an array of two BigNumbers representing the value of this BigNumber as a simple\r\n   * fraction with an integer numerator and an integer denominator.\r\n   * The denominator will be a positive non-zero value less than or equal to the specified\r\n   * maximum denominator. If a maximum denominator is not specified, the denominator will be\r\n   * the lowest value necessary to represent the number exactly.\r\n   *\r\n   * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.\r\n   *\r\n   * '[BigNumber Error] Argument {not an integer|out of range} : {md}'\r\n   */\r\n  P.toFraction = function (md) {\r\n    var d, d0, d1, d2, e, exp, n, n0, n1, q, r, s,\r\n      x = this,\r\n      xc = x.c;\r\n\r\n    if (md != null) {\r\n      n = new BigNumber(md);\r\n\r\n      // Throw if md is less than one or is not an integer, unless it is Infinity.\r\n      if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {\r\n        throw Error\r\n          (bignumberError + 'Argument ' +\r\n            (n.isInteger() ? 'out of range: ' : 'not an integer: ') + valueOf(n));\r\n      }\r\n    }\r\n\r\n    if (!xc) return new BigNumber(x);\r\n\r\n    d = new BigNumber(ONE);\r\n    n1 = d0 = new BigNumber(ONE);\r\n    d1 = n0 = new BigNumber(ONE);\r\n    s = coeffToString(xc);\r\n\r\n    // Determine initial denominator.\r\n    // d is a power of 10 and the minimum max denominator that specifies the value exactly.\r\n    e = d.e = s.length - x.e - 1;\r\n    d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];\r\n    md = !md || n.comparedTo(d) > 0 ? (e > 0 ? d : n1) : n;\r\n\r\n    exp = MAX_EXP;\r\n    MAX_EXP = 1 / 0;\r\n    n = new BigNumber(s);\r\n\r\n    // n0 = d1 = 0\r\n    n0.c[0] = 0;\r\n\r\n    for (; ;)  {\r\n      q = div(n, d, 0, 1);\r\n      d2 = d0.plus(q.times(d1));\r\n      if (d2.comparedTo(md) == 1) break;\r\n      d0 = d1;\r\n      d1 = d2;\r\n      n1 = n0.plus(q.times(d2 = n1));\r\n      n0 = d2;\r\n      d = n.minus(q.times(d2 = d));\r\n      n = d2;\r\n    }\r\n\r\n    d2 = div(md.minus(d0), d1, 0, 1);\r\n    n0 = n0.plus(d2.times(n1));\r\n    d0 = d0.plus(d2.times(d1));\r\n    n0.s = n1.s = x.s;\r\n    e = e * 2;\r\n\r\n    // Determine which fraction is closer to x, n0/d0 or n1/d1\r\n    r = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(\r\n        div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [n1, d1] : [n0, d0];\r\n\r\n    MAX_EXP = exp;\r\n\r\n    return r;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return the value of this BigNumber converted to a number primitive.\r\n   */\r\n  P.toNumber = function () {\r\n    return +valueOf(this);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this BigNumber rounded to sd significant digits\r\n   * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits\r\n   * necessary to represent the integer part of the value in fixed-point notation, then use\r\n   * exponential notation.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n   */\r\n  P.toPrecision = function (sd, rm) {\r\n    if (sd != null) intCheck(sd, 1, MAX);\r\n    return format(this, sd, rm, 2);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this BigNumber in base b, or base 10 if b is\r\n   * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and\r\n   * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent\r\n   * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than\r\n   * TO_EXP_NEG, return exponential notation.\r\n   *\r\n   * [b] {number} Integer, 2 to ALPHABET.length inclusive.\r\n   *\r\n   * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n   */\r\n  P.toString = function (b) {\r\n    var str,\r\n      n = this,\r\n      s = n.s,\r\n      e = n.e;\r\n\r\n    // Infinity or NaN?\r\n    if (e === null) {\r\n      if (s) {\r\n        str = 'Infinity';\r\n        if (s < 0) str = '-' + str;\r\n      } else {\r\n        str = 'NaN';\r\n      }\r\n    } else {\r\n      if (b == null) {\r\n        str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n         ? toExponential(coeffToString(n.c), e)\r\n         : toFixedPoint(coeffToString(n.c), e, '0');\r\n      } else if (b === 10 && alphabetHasNormalDecimalDigits) {\r\n        n = round(new BigNumber(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);\r\n        str = toFixedPoint(coeffToString(n.c), n.e, '0');\r\n      } else {\r\n        intCheck(b, 2, ALPHABET.length, 'Base');\r\n        str = convertBase(toFixedPoint(coeffToString(n.c), e, '0'), 10, b, s, true);\r\n      }\r\n\r\n      if (s < 0 && n.c[0]) str = '-' + str;\r\n    }\r\n\r\n    return str;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return as toString, but do not accept a base argument, and include the minus sign for\r\n   * negative zero.\r\n   */\r\n  P.valueOf = P.toJSON = function () {\r\n    return valueOf(this);\r\n  };\r\n\r\n\r\n  P._isBigNumber = true;\r\n\r\n  P[Symbol.toStringTag] = 'BigNumber';\r\n\r\n  // Node.js v10.12.0+\r\n  P[Symbol.for('nodejs.util.inspect.custom')] = P.valueOf;\r\n\r\n  if (configObject != null) BigNumber.set(configObject);\r\n\r\n  return BigNumber;\r\n}\r\n\r\n\r\n// PRIVATE HELPER FUNCTIONS\r\n\r\n// These functions don't need access to variables,\r\n// e.g. DECIMAL_PLACES, in the scope of the `clone` function above.\r\n\r\n\r\nfunction bitFloor(n) {\r\n  var i = n | 0;\r\n  return n > 0 || n === i ? i : i - 1;\r\n}\r\n\r\n\r\n// Return a coefficient array as a string of base 10 digits.\r\nfunction coeffToString(a) {\r\n  var s, z,\r\n    i = 1,\r\n    j = a.length,\r\n    r = a[0] + '';\r\n\r\n  for (; i < j;) {\r\n    s = a[i++] + '';\r\n    z = LOG_BASE - s.length;\r\n    for (; z--; s = '0' + s);\r\n    r += s;\r\n  }\r\n\r\n  // Determine trailing zeros.\r\n  for (j = r.length; r.charCodeAt(--j) === 48;);\r\n\r\n  return r.slice(0, j + 1 || 1);\r\n}\r\n\r\n\r\n// Compare the value of BigNumbers x and y.\r\nfunction compare(x, y) {\r\n  var a, b,\r\n    xc = x.c,\r\n    yc = y.c,\r\n    i = x.s,\r\n    j = y.s,\r\n    k = x.e,\r\n    l = y.e;\r\n\r\n  // Either NaN?\r\n  if (!i || !j) return null;\r\n\r\n  a = xc && !xc[0];\r\n  b = yc && !yc[0];\r\n\r\n  // Either zero?\r\n  if (a || b) return a ? b ? 0 : -j : i;\r\n\r\n  // Signs differ?\r\n  if (i != j) return i;\r\n\r\n  a = i < 0;\r\n  b = k == l;\r\n\r\n  // Either Infinity?\r\n  if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;\r\n\r\n  // Compare exponents.\r\n  if (!b) return k > l ^ a ? 1 : -1;\r\n\r\n  j = (k = xc.length) < (l = yc.length) ? k : l;\r\n\r\n  // Compare digit by digit.\r\n  for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;\r\n\r\n  // Compare lengths.\r\n  return k == l ? 0 : k > l ^ a ? 1 : -1;\r\n}\r\n\r\n\r\n/*\r\n * Check that n is a primitive number, an integer, and in range, otherwise throw.\r\n */\r\nfunction intCheck(n, min, max, name) {\r\n  if (n < min || n > max || n !== mathfloor(n)) {\r\n    throw Error\r\n     (bignumberError + (name || 'Argument') + (typeof n == 'number'\r\n       ? n < min || n > max ? ' out of range: ' : ' not an integer: '\r\n       : ' not a primitive number: ') + String(n));\r\n  }\r\n}\r\n\r\n\r\n// Assumes finite n.\r\nfunction isOdd(n) {\r\n  var k = n.c.length - 1;\r\n  return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;\r\n}\r\n\r\n\r\nfunction toExponential(str, e) {\r\n  return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) +\r\n   (e < 0 ? 'e' : 'e+') + e;\r\n}\r\n\r\n\r\nfunction toFixedPoint(str, e, z) {\r\n  var len, zs;\r\n\r\n  // Negative exponent?\r\n  if (e < 0) {\r\n\r\n    // Prepend zeros.\r\n    for (zs = z + '.'; ++e; zs += z);\r\n    str = zs + str;\r\n\r\n  // Positive exponent\r\n  } else {\r\n    len = str.length;\r\n\r\n    // Append zeros.\r\n    if (++e > len) {\r\n      for (zs = z, e -= len; --e; zs += z);\r\n      str += zs;\r\n    } else if (e < len) {\r\n      str = str.slice(0, e) + '.' + str.slice(e);\r\n    }\r\n  }\r\n\r\n  return str;\r\n}\r\n\r\n\r\n// EXPORT\r\n\r\n\r\nexport var BigNumber = clone();\r\n\r\nexport default BigNumber;\r\n"],"names":["asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","Promise","then","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined","_regeneratorRuntime","exports","Op","Object","prototype","hasOwn","hasOwnProperty","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","obj","defineProperty","enumerable","configurable","writable","wrap","innerFn","outerFn","tryLocsList","protoGenerator","Generator","generator","create","context","Context","_invoke","state","method","Error","doneResult","delegate","delegateResult","maybeInvokeDelegate","ContinueSentinel","sent","_sent","dispatchException","abrupt","record","tryCatch","type","call","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","forEach","AsyncIterator","PromiseImpl","invoke","result","__await","unwrapped","previousPromise","callInvokeWithMethodAndArg","TypeError","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","length","i","displayName","isGeneratorFunction","genFun","ctor","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","iter","keys","object","reverse","pop","skipTempReset","prev","charAt","slice","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","thrown","delegateYield","isNumeric","mathceil","Math","ceil","mathfloor","floor","bignumberError","tooManyDigits","BASE","LOG_BASE","MAX_SAFE_INTEGER","POWS_TEN","SQRT_BASE","MAX","bitFloor","n","coeffToString","a","s","z","j","r","charCodeAt","compare","x","y","b","xc","c","yc","k","e","l","intCheck","min","max","String","isOdd","toExponential","str","toFixedPoint","len","zs","BigNumber","clone","configObject","div","convertBase","parseNumeric","P","toString","valueOf","ONE","DECIMAL_PLACES","ROUNDING_MODE","TO_EXP_NEG","TO_EXP_POS","MIN_EXP","MAX_EXP","CRYPTO","MODULO_MODE","POW_PRECISION","FORMAT","prefix","groupSize","secondaryGroupSize","groupSeparator","decimalSeparator","fractionGroupSize","fractionGroupSeparator","suffix","ALPHABET","alphabetHasNormalDecimalDigits","v","alphabet","caseChanged","isNum","_isBigNumber","test","indexOf","replace","search","substring","round","DEBUG","toUpperCase","toLowerCase","format","rm","id","c0","ne","maxOrMin","m","normalise","sd","d","ni","rd","pows10","out","ROUND_UP","ROUND_DOWN","ROUND_CEIL","ROUND_FLOOR","ROUND_HALF_UP","ROUND_HALF_DOWN","ROUND_HALF_EVEN","ROUND_HALF_CEIL","ROUND_HALF_FLOOR","EUCLID","config","set","p","crypto","getRandomValues","randomBytes","EXPONENTIAL_AT","RANGE","isBigNumber","maximum","lt","minimum","gt","random","pow2_53","random53bitInt","dp","rand","Uint32Array","copy","splice","sum","plus","decimal","toBaseOut","baseIn","baseOut","arrL","arr","sign","callerIsToString","pow","concat","multiply","base","temp","xlo","xhi","carry","klo","khi","aL","bL","cmp","subtract","more","prod","prodL","q","qc","rem","remL","rem0","xi","xL","yc0","yL","yz","NaN","basePrefix","dotAfter","dotBefore","isInfinityOrNaN","whitespaceOrPlus","p1","p2","absoluteValue","abs","comparedTo","decimalPlaces","dividedBy","dividedToIntegerBy","idiv","exponentiatedBy","half","isModExp","nIsBig","nIsNeg","nIsOdd","isInteger","mod","times","integerValue","isEqualTo","eq","isFinite","isGreaterThan","isGreaterThanOrEqualTo","gte","isLessThan","isLessThanOrEqualTo","lte","isNegative","isPositive","isZero","minus","t","xLTy","xe","ye","modulo","multipliedBy","xcL","ycL","ylo","yhi","zc","sqrtBase","negated","precision","shiftedBy","squareRoot","sqrt","rep","toFixed","toFormat","split","g1","g2","intPart","fractionPart","isNeg","intDigits","substr","RegExp","toFraction","md","d0","d1","d2","exp","n0","n1","toNumber","toPrecision","toJSON","for"],"sourceRoot":""}